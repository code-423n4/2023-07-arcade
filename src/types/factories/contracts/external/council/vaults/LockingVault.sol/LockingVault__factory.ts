/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  LockingVault,
  LockingVaultInterface,
} from "../../../../../../contracts/external/council/vaults/LockingVault.sol/LockingVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_staleBlockLag",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "amount",
        type: "int256",
      },
    ],
    name: "VoteChange",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newDelegate",
        type: "address",
      },
    ],
    name: "changeDelegation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fundedAccount",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "firstDelegation",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "queryVotePower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "queryVotePowerView",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "staleBlockLag",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161138338038061138383398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a0516112cb6100b86000396000818160ba015261058e01526000818161012d01528181610330015261068301526112cb6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063e91f32351161005b578063e91f323514610102578063f45346dc14610115578063fc0c546a14610128578063fc7e286d1461017457600080fd5b80632e1a7d4d1461008d5780639f973fd5146100a2578063c2c94b88146100b5578063e7d20283146100ef575b600080fd5b6100a061009b366004610fe6565b6101c0565b005b6100a06100b0366004611028565b6103ba565b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100dc6100fd36600461104a565b610555565b6100dc610110366004611074565b610577565b6100a06101233660046110fb565b6105c6565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e6565b610187610182366004611028565b6108f1565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526bffffffffffffffffffffffff9091166020830152016100e6565b60006101ca610958565b336000908152602091909152604090208054909150829082906014906102179084907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16611166565b82546bffffffffffffffffffffffff9182166101009390930a928302919092021990911617905550805473ffffffffffffffffffffffffffffffffffffffff16600061026161099d565b9050600061026f82846109f0565b90506102878361027f8784611192565b849190610a94565b73ffffffffffffffffffffffffffffffffffffffff8316337f33161cf2da28d747be9df136b6f3729390298494947268743193c53d73d3c2e06102ea887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6111a5565b60405190815260200160405180910390a36040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018690527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af115801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b291906111f1565b505050505050565b60006103c4610958565b33600090815260209190915260408120805473ffffffffffffffffffffffffffffffffffffffff8581167fffffffffffffffffffffffff000000000000000000000000000000000000000083161783559193506bffffffffffffffffffffffff740100000000000000000000000000000000000000008204169291169061044961099d565b9050600061045782846109f0565b90506104678361027f8684611192565b73ffffffffffffffffffffffffffffffffffffffff8316337f33161cf2da28d747be9df136b6f3729390298494947268743193c53d73d3c2e06104ca877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6111a5565b60405190815260200160405180910390a360006104e783886109f0565b90506104ff876104f78784611213565b859190610a94565b60405185815273ffffffffffffffffffffffffffffffffffffffff88169033907f33161cf2da28d747be9df136b6f3729390298494947268743193c53d73d3c2e09060200160405180910390a350505050505050565b60008061056061099d565b905061056d818585610bd2565b9150505b92915050565b60008061058261099d565b90506105bc86866105b37f000000000000000000000000000000000000000000000000000000000000000043611192565b84929190610c41565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5a65726f20616464722064656c65676174696f6e00000000000000000000000060448201526064015b60405180910390fd5b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070591906111f1565b506000610710610958565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526020929092526040909120805490925016806107f0575080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316178082558290849083906014906107bd9084907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16611226565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550610859565b81548490839060149061082a9084907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16611226565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505b600061086361099d565b9050600061087182846109f0565b90508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f33161cf2da28d747be9df136b6f3729390298494947268743193c53d73d3c2e0886040516108d291815260200190565b60405180910390a36108e88361027f8884611213565b50505050505050565b60008060006108fe610958565b73ffffffffffffffffffffffffffffffffffffffff9485166000908152602091909152604090205493841694740100000000000000000000000000000000000000009094046bffffffffffffffffffffffff169392505050565b60006109986040518060400160405280600881526020017f6465706f73697473000000000000000000000000000000000000000000000000815250610cc5565b905090565b6040805180820190915260608152600060208201526109986040518060400160405280600b81526020017f766f74696e67506f776572000000000000000000000000000000000000000000815250610d3e565b6000806109fe846020015190565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020919091526040812080549092506fffffffffffffffffffffffffffffffff1690819003610a4e57600092505050610571565b6000610a8983610a5f600185611192565b016001015460c081901c9177ffffffffffffffffffffffffffffffffffffffffffffffff90911690565b979650505050505050565b77ffffffffffffffffffffffffffffffffffffffffffffffff811115610b16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f4f6f420000000000000000000000000000000000000000000000000000000000604482015260640161063f565b6000610b23846020015190565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020829052604081208054929350914360c01b9185831791608081901c916fffffffffffffffffffffffffffffffff909116908115610b8b57610b8786610a5f600185611192565b5090505b81438203610ba157610b9e600184611192565b90505b8481600189010155438214610bc557610bc58785610bc0866001611213565b610d77565b5050505050505050505050565b600080610be0856020015190565b73ffffffffffffffffffffffffffffffffffffffff85166000908152602082905260408120805492935091608081901c916fffffffffffffffffffffffffffffffff90911690610c338488838686610da0565b9a9950505050505050505050565b600080610c4f866020015190565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602082905260408120805492935091608081901c916fffffffffffffffffffffffffffffffff9091169080610ca3858a8a8787610da0565b9150915083821115610c3357610cba848387610f7b565b610c33858385610d77565b6000807f03a912cdb153207069d92d44a2357e3f0ce00f7ee84da3510f1c6851b4cac4ee905060008184604051602001610d0092919061124b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b6040805180820190915260608152600060208201526000610d5e83610fab565b6040805180820190915293845260208401525090919050565b808210610d8357600080fd5b6fffffffffffffffffffffffffffffffff1660809190911b179055565b60008082600003610e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f756e696e697469616c697a656400000000000000000000000000000000000000604482015260640161063f565b85851115610e1a57600080fd5b828410610e2657600080fd5b6000610e33600185611192565b90508460005b828214610ed65760006002610e4e8585611213565b610e59906001611213565b610e639190611283565b6001818d01015490915060c081901c9077ffffffffffffffffffffffffffffffffffffffffffffffff168b8203610ea457929650919450610f719350505050565b8b821015610ec0578a821015610eb8578293505b829450610ece565b610ecb600184611192565b95505b505050610e39565b60018a8301015460c081901c9077ffffffffffffffffffffffffffffffffffffffffffffffff168a821115610f67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f536561726368204661696c757265000000000000000000000000000000000000604482015260640161063f565b9195509093505050505b9550959350505050565b81831115610f8857600080fd5b60018101835b83811015610fa457600082820155600101610f8e565b5050505050565b6000807f7b1a68ec3e3284b167e69db1c622dcfa612281976b71d7e2d239dbe16a75891a905060008184604051602001610d0092919061124b565b600060208284031215610ff857600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461102357600080fd5b919050565b60006020828403121561103a57600080fd5b61104382610fff565b9392505050565b6000806040838503121561105d57600080fd5b61106683610fff565b946020939093013593505050565b6000806000806060858703121561108a57600080fd5b61109385610fff565b935060208501359250604085013567ffffffffffffffff808211156110b757600080fd5b818701915087601f8301126110cb57600080fd5b8135818111156110da57600080fd5b8860208285010111156110ec57600080fd5b95989497505060200194505050565b60008060006060848603121561111057600080fd5b61111984610fff565b92506020840135915061112e60408501610fff565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6bffffffffffffffffffffffff82811682821603908082111561118b5761118b611137565b5092915050565b8181038181111561057157610571611137565b808202600082127f8000000000000000000000000000000000000000000000000000000000000000841416156111dd576111dd611137565b818105831482151761057157610571611137565b60006020828403121561120357600080fd5b8151801515811461104357600080fd5b8082018082111561057157610571611137565b6bffffffffffffffffffffffff81811683821601908082111561118b5761118b611137565b8281526000825160005b8181101561127157602081860181015185830182015201611255565b50600092016020019182525092915050565b6000826112b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea164736f6c6343000812000a";

type LockingVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LockingVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LockingVault__factory extends ContractFactory {
  constructor(...args: LockingVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    _staleBlockLag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LockingVault> {
    return super.deploy(
      _token,
      _staleBlockLag,
      overrides || {}
    ) as Promise<LockingVault>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    _staleBlockLag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _staleBlockLag, overrides || {});
  }
  override attach(address: string): LockingVault {
    return super.attach(address) as LockingVault;
  }
  override connect(signer: Signer): LockingVault__factory {
    return super.connect(signer) as LockingVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LockingVaultInterface {
    return new utils.Interface(_abi) as LockingVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LockingVault {
    return new Contract(address, _abi, signerOrProvider) as LockingVault;
  }
}
