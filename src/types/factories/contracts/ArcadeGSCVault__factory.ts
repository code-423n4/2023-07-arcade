/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ArcadeGSCVault,
  ArcadeGSCVaultInterface,
} from "../../contracts/ArcadeGSCVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ICoreVoting",
        name: "coreVoting",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "votingPowerBound",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "when",
        type: "uint256",
      },
    ],
    name: "Kicked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "when",
        type: "uint256",
      },
    ],
    name: "MembershipProved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "coreVoting",
    outputs: [
      {
        internalType: "contract ICoreVoting",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "deauthorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "getUserVaults",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "idleDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "extraData",
        type: "bytes[]",
      },
    ],
    name: "kick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "members",
    outputs: [
      {
        internalType: "uint256",
        name: "joined",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "votingVaults",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "extraData",
        type: "bytes[]",
      },
    ],
    name: "proveMembership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "queryVotePower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICoreVoting",
        name: "_newVoting",
        type: "address",
      },
    ],
    name: "setCoreVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_idleDuration",
        type: "uint256",
      },
    ],
    name: "setIdleDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newBound",
        type: "uint256",
      },
    ],
    name: "setVotePowerBound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "votingPowerBound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052620546006005553480156200001857600080fd5b5060405162001788380380620017888339810160408190526200003b9162000110565b60008054336001600160a01b031991821617909155600380549091166001600160a01b0385161790556004829055828282620000778162000083565b50505050505062000158565b6000546001600160a01b03163314620000d55760405162461bcd60e51b815260206004820152601060248201526f29b2b73232b9103737ba1037bbb732b960811b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811681146200010d57600080fd5b50565b6000806000606084860312156200012657600080fd5b83516200013381620000f7565b6020850151604086015191945092506200014d81620000f7565b809150509250925092565b61162080620001686000396000f3fe608060405234801561001057600080fd5b506004361061011a5760003560e01c80637e280246116100b2578063b6a5d7de11610081578063e7f3c69c11610066578063e7f3c69c14610299578063e91f3235146102b9578063fe9fbb80146102cc57600080fd5b8063b6a5d7de14610253578063b91816111461026657600080fd5b80637e280246146101d25780638da5cb5b146101e5578063ad292ff81461022a578063ae4b36281461023357600080fd5b806322905a6c116100ee57806322905a6c1461019057806327c97fa5146101a357806338e02bf7146101b65780633eba045b146101bf57600080fd5b8062fe809c1461011f57806308ae4b0c1461013457806309960f001461016a57806313af40351461017d575b600080fd5b61013261012d3660046111c2565b610305565b005b6101576101423660046111fd565b60026020526000908152604090206001015481565b6040519081526020015b60405180910390f35b61013261017836600461126d565b610390565b61013261018b3660046111fd565b610862565b61013261019e3660046112d9565b61092a565b6101326101b13660046111fd565b610c59565b61015760045481565b6101326101cd3660046111c2565b610d26565b6101326101e03660046111fd565b610dac565b6000546102059073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610161565b61015760055481565b6003546102059073ffffffffffffffffffffffffffffffffffffffff1681565b6101326102613660046111fd565b610e74565b6102896102743660046111fd565b60016020526000908152604090205460ff1681565b6040519015158152602001610161565b6102ac6102a73660046111fd565b610f4e565b604051610161919061132e565b6101576102c7366004611388565b610fde565b6102896102da3660046111fd565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff16331461038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e65720000000000000000000000000000000060448201526064015b60405180910390fd5b600555565b8261039d5761039d611411565b60005b838110156106055760006103b582600161146f565b90505b848110156104b3578585828181106103d2576103d2611488565b90506020020160208101906103e791906111fd565b73ffffffffffffffffffffffffffffffffffffffff1686868481811061040f5761040f611488565b905060200201602081019061042491906111fd565b73ffffffffffffffffffffffffffffffffffffffff16036104a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6475706c6963617465207661756c7400000000000000000000000000000000006044820152606401610382565b806104ab816114b7565b9150506103b8565b5060035460009073ffffffffffffffffffffffffffffffffffffffff1663af7a060c8787858181106104e7576104e7611488565b90506020020160208101906104fc91906111fd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058991906114ef565b9050806105f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f566f74696e67207661756c74206e6f7420617070726f766564000000000000006044820152606401610382565b50806105fd816114b7565b9150506103a0565b506000805b8481101561070a57600086868381811061062657610626611488565b905060200201602081019061063b91906111fd565b73ffffffffffffffffffffffffffffffffffffffff1663e91f323533610662600143611511565b88888781811061067457610674611488565b90506020028101906106869190611524565b6040518563ffffffff1660e01b81526004016106a59493929190611589565b6020604051808303816000875af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e891906115fa565b90506106f4818461146f565b9250508080610702906114b7565b91505061060a565b50600454811015610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4e6f7420656e6f75676820766f746573000000000000000000000000000000006044820152606401610382565b33600090815260026020526040902060010154156107af573360009081526002602052604090206107a9908686611091565b50610825565b6040518060400160405280868680806020026020016040519081016040528093929190818152602001838360200280828437600092018290525093855250504260209384015250338152600282526040902082518051919261081692849290910190611119565b50602082015181600101559050505b60405142815233907ff1e092311eefceee7206049c87d17464c34a7b92b85779b0b835ddb292a42e70906020015b60405180910390a25050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610382565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320805482518185028101850190935280835291929091908301828280156109ae57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610983575b505050505090506000805b8251811015610b6b57600354835173ffffffffffffffffffffffffffffffffffffffff9091169063af7a060c908590849081106109f8576109f8611488565b60200260200101516040518263ffffffff1660e01b8152600401610a38919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7991906114ef565b15610b59576000838281518110610a9257610a92611488565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663e91f323588600143610ac39190611511565b898987818110610ad557610ad5611488565b9050602002810190610ae79190611524565b6040518563ffffffff1660e01b8152600401610b069493929190611589565b6020604051808303816000875af1158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4991906115fa565b9050610b55818461146f565b9250505b80610b63816114b7565b9150506109b9565b506004548110610bd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f74206b69636b2d61626c65000000000000000000000000000000000000006044820152606401610382565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260026020526040812090610c078282611193565b600182016000905550508473ffffffffffffffffffffffffffffffffffffffff167f8684348ed72cd103be12fcb99e9c5917294a8092ccd4808d1cd7b19daf9829914360405161085391815260200190565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610382565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610da7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610382565b600455565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610382565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ef5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f53656e646572206e6f74206f776e6572000000000000000000000000000000006044820152606401610382565b610f4b8173ffffffffffffffffffffffffffffffffffffffff16600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b50565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604091829020805483518184028101840190945280845260609392830182828015610fd257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610fa7575b50505050509050919050565b6000805473ffffffffffffffffffffffffffffffffffffffff9081169086160361100c5750620186a0611089565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604090206001015415801590611078575060055473ffffffffffffffffffffffffffffffffffffffff861660009081526002602052604090206001015442916110759161146f565b11155b1561108557506001611089565b5060005b949350505050565b828054828255906000526020600020908101928215611109579160200282015b828111156111095781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8435161782556020909201916001909101906110b1565b506111159291506111ad565b5090565b828054828255906000526020600020908101928215611109579160200282015b8281111561110957825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611139565b5080546000825590600052602060002090810190610f4b91905b5b8082111561111557600081556001016111ae565b6000602082840312156111d457600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f4b57600080fd5b60006020828403121561120f57600080fd5b813561121a816111db565b9392505050565b60008083601f84011261123357600080fd5b50813567ffffffffffffffff81111561124b57600080fd5b6020830191508360208260051b850101111561126657600080fd5b9250929050565b6000806000806040858703121561128357600080fd5b843567ffffffffffffffff8082111561129b57600080fd5b6112a788838901611221565b909650945060208701359150808211156112c057600080fd5b506112cd87828801611221565b95989497509550505050565b6000806000604084860312156112ee57600080fd5b83356112f9816111db565b9250602084013567ffffffffffffffff81111561131557600080fd5b61132186828701611221565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b8181101561137c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161134a565b50909695505050505050565b6000806000806060858703121561139e57600080fd5b84356113a9816111db565b935060208501359250604085013567ffffffffffffffff808211156113cd57600080fd5b818701915087601f8301126113e157600080fd5b8135818111156113f057600080fd5b88602082850101111561140257600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561148257611482611440565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114e8576114e8611440565b5060010190565b60006020828403121561150157600080fd5b8151801515811461121a57600080fd5b8181038181111561148257611482611440565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261155957600080fd5b83018035915067ffffffffffffffff82111561157457600080fd5b60200191503681900382131561126657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019392505050565b60006020828403121561160c57600080fd5b505191905056fea164736f6c6343000812000a";

type ArcadeGSCVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArcadeGSCVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArcadeGSCVault__factory extends ContractFactory {
  constructor(...args: ArcadeGSCVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    coreVoting: PromiseOrValue<string>,
    votingPowerBound: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ArcadeGSCVault> {
    return super.deploy(
      coreVoting,
      votingPowerBound,
      owner,
      overrides || {}
    ) as Promise<ArcadeGSCVault>;
  }
  override getDeployTransaction(
    coreVoting: PromiseOrValue<string>,
    votingPowerBound: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      coreVoting,
      votingPowerBound,
      owner,
      overrides || {}
    );
  }
  override attach(address: string): ArcadeGSCVault {
    return super.attach(address) as ArcadeGSCVault;
  }
  override connect(signer: Signer): ArcadeGSCVault__factory {
    return super.connect(signer) as ArcadeGSCVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArcadeGSCVaultInterface {
    return new utils.Interface(_abi) as ArcadeGSCVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArcadeGSCVault {
    return new Contract(address, _abi, signerOrProvider) as ArcadeGSCVault;
  }
}
