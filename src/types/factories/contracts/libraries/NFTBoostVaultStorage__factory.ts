/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NFTBoostVaultStorage,
  NFTBoostVaultStorageInterface,
} from "../../../contracts/libraries/NFTBoostVaultStorage";

const _abi = [
  {
    inputs: [],
    name: "MULTIPLIER_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REGISTRATION_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60ad610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c80631494e2f6146042578063f30dafcc14607a575b600080fd5b60687ff162ab2a93c7e839fe65139803001cff34be31efd14d829854af05b9911b6e8481565b60405190815260200160405180910390f35b60687f07c1b518f6d86c40c54c8bf33e580b563b3d5c3074a090416d401cb257be2df78156fea164736f6c6343000812000a";

type NFTBoostVaultStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTBoostVaultStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTBoostVaultStorage__factory extends ContractFactory {
  constructor(...args: NFTBoostVaultStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTBoostVaultStorage> {
    return super.deploy(overrides || {}) as Promise<NFTBoostVaultStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTBoostVaultStorage {
    return super.attach(address) as NFTBoostVaultStorage;
  }
  override connect(signer: Signer): NFTBoostVaultStorage__factory {
    return super.connect(signer) as NFTBoostVaultStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTBoostVaultStorageInterface {
    return new utils.Interface(_abi) as NFTBoostVaultStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTBoostVaultStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as NFTBoostVaultStorage;
  }
}
