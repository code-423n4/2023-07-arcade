/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BadgeDescriptor,
  BadgeDescriptorInterface,
} from "../../../contracts/nft/BadgeDescriptor";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
    ],
    name: "SetBaseURI",
    type: "event",
  },
  {
    inputs: [],
    name: "baseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newBaseURI",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e8538038062000e858339810160408190526200003491620000bb565b6200003f3362000055565b60016200004d82826200021f565b5050620002eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620000cf57600080fd5b82516001600160401b0380821115620000e757600080fd5b818501915085601f830112620000fc57600080fd5b815181811115620001115762000111620000a5565b604051601f8201601f19908116603f011681019083821181831017156200013c576200013c620000a5565b8160405282815288868487010111156200015557600080fd5b600093505b828410156200017957848401860151818501870152928501926200015a565b600086848301015280965050505050505092915050565b600181811c90821680620001a557607f821691505b602082108103620001c657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021a57600081815260208120601f850160051c81016020861015620001f55750805b601f850160051c820191505b81811015620002165782815560010162000201565b5050505b505050565b81516001600160401b038111156200023b576200023b620000a5565b62000253816200024c845462000190565b84620001cc565b602080601f8311600181146200028b5760008415620002725750858301515b600019600386901b1c1916600185901b17855562000216565b600085815260208120601f198616915b82811015620002bc578886015182559484019460019091019084016200029b565b5085821015620002db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610b8a80620002fb6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100b2578063c87b56dd146100da578063f2fde38b146100ed57600080fd5b806355f804b3146100775780636c0360eb1461008c578063715018a6146100aa575b600080fd5b61008a61008536600461066f565b610100565b005b6100946101e4565b6040516100a19190610762565b60405180910390f35b61008a610272565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a1565b6100946100e83660046107b3565b6102ff565b61008a6100fb3660046107cc565b61035e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600161019282826108ab565b503373ffffffffffffffffffffffffffffffffffffffff167fe7e6d2e694e925d1996aaef24328f8c8b026ccc5dd0a1c2397509d5d31de8cbb826040516101d99190610762565b60405180910390a250565b600180546101f190610809565b80601f016020809104026020016040519081016040528092919081815260200182805461021d90610809565b801561026a5780601f1061023f5761010080835404028352916020019161026a565b820191906000526020600020905b81548152906001019060200180831161024d57829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b6102fd600061048e565b565b606060006001805461031090610809565b90501161032c5760405180602001604052806000815250610358565b600161033783610503565b6040516020016103489291906109c5565b6040516020818303038152906040525b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b73ffffffffffffffffffffffffffffffffffffffff8116610482576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161017d565b61048b8161048e565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608160000361054657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610570578061055a81610a99565b91506105699050600a83610b00565b915061054a565b60008167ffffffffffffffff81111561058b5761058b610640565b6040519080825280601f01601f1916602001820160405280156105b5576020820181803683370190505b5090505b8415610638576105ca600183610b14565b91506105d7600a86610b27565b6105e2906030610b3b565b60f81b8183815181106105f7576105f7610b4e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610631600a86610b00565b94506105b9565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561068157600080fd5b813567ffffffffffffffff8082111561069957600080fd5b818401915084601f8301126106ad57600080fd5b8135818111156106bf576106bf610640565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561070557610705610640565b8160405282815287602084870101111561071e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b83811015610759578181015183820152602001610741565b50506000910152565b602081526000825180602084015261078181604085016020870161073e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000602082840312156107c557600080fd5b5035919050565b6000602082840312156107de57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461080257600080fd5b9392505050565b600181811c9082168061081d57607f821691505b602082108103610856577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156108a657600081815260208120601f850160051c810160208610156108835750805b601f850160051c820191505b818110156108a25782815560010161088f565b5050505b505050565b815167ffffffffffffffff8111156108c5576108c5610640565b6108d9816108d38454610809565b8461085c565b602080601f83116001811461092c57600084156108f65750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556108a2565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156109795788860151825594840194600190910190840161095a565b50858210156109b557878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008084546109d381610809565b600182811680156109eb5760018114610a1e57610a4d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450610a4d565b8860005260208060002060005b85811015610a445781548a820152908401908201610a2b565b50505082870194505b505050508351610a6181836020880161073e565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610aca57610aca610a6a565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610b0f57610b0f610ad1565b500490565b8181038181111561035857610358610a6a565b600082610b3657610b36610ad1565b500690565b8082018082111561035857610358610a6a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c6343000812000a";

type BadgeDescriptorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BadgeDescriptorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BadgeDescriptor__factory extends ContractFactory {
  constructor(...args: BadgeDescriptorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BadgeDescriptor> {
    return super.deploy(_baseURI, overrides || {}) as Promise<BadgeDescriptor>;
  }
  override getDeployTransaction(
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_baseURI, overrides || {});
  }
  override attach(address: string): BadgeDescriptor {
    return super.attach(address) as BadgeDescriptor;
  }
  override connect(signer: Signer): BadgeDescriptor__factory {
    return super.connect(signer) as BadgeDescriptor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgeDescriptorInterface {
    return new utils.Interface(_abi) as BadgeDescriptorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgeDescriptor {
    return new Contract(address, _abi, signerOrProvider) as BadgeDescriptor;
  }
}
