/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IArcadeTreasury {
  export type SpendThresholdStruct = {
    small: PromiseOrValue<BigNumberish>;
    medium: PromiseOrValue<BigNumberish>;
    large: PromiseOrValue<BigNumberish>;
  };

  export type SpendThresholdStructOutput = [BigNumber, BigNumber, BigNumber] & {
    small: BigNumber;
    medium: BigNumber;
    large: BigNumber;
  };
}

export interface IArcadeTreasuryInterface extends utils.Interface {
  functions: {
    "approveLargeSpend(address,address,uint256)": FunctionFragment;
    "approveMediumSpend(address,address,uint256)": FunctionFragment;
    "approveSmallSpend(address,address,uint256)": FunctionFragment;
    "batchCalls(address[],bytes[])": FunctionFragment;
    "gscApprove(address,address,uint256)": FunctionFragment;
    "gscSpend(address,uint256,address)": FunctionFragment;
    "largeSpend(address,uint256,address)": FunctionFragment;
    "mediumSpend(address,uint256,address)": FunctionFragment;
    "setGSCAllowance(address,uint256)": FunctionFragment;
    "setThreshold(address,(uint256,uint256,uint256))": FunctionFragment;
    "smallSpend(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveLargeSpend"
      | "approveMediumSpend"
      | "approveSmallSpend"
      | "batchCalls"
      | "gscApprove"
      | "gscSpend"
      | "largeSpend"
      | "mediumSpend"
      | "setGSCAllowance"
      | "setThreshold"
      | "smallSpend"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveLargeSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMediumSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSmallSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCalls",
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gscApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gscSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "largeSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mediumSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGSCAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [PromiseOrValue<string>, IArcadeTreasury.SpendThresholdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "smallSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveLargeSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveMediumSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSmallSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCalls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gscApprove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gscSpend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "largeSpend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mediumSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGSCAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "smallSpend", data: BytesLike): Result;

  events: {};
}

export interface IArcadeTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IArcadeTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveLargeSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveMediumSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveSmallSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchCalls(
      targets: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gscApprove(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gscSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    largeSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mediumSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGSCAllowance(
      token: PromiseOrValue<string>,
      newAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      token: PromiseOrValue<string>,
      thresholds: IArcadeTreasury.SpendThresholdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    smallSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveLargeSpend(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveMediumSpend(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveSmallSpend(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchCalls(
    targets: PromiseOrValue<string>[],
    calldatas: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gscApprove(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gscSpend(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  largeSpend(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mediumSpend(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGSCAllowance(
    token: PromiseOrValue<string>,
    newAllowance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    token: PromiseOrValue<string>,
    thresholds: IArcadeTreasury.SpendThresholdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  smallSpend(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveLargeSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveMediumSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveSmallSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchCalls(
      targets: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    gscApprove(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gscSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    largeSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mediumSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGSCAllowance(
      token: PromiseOrValue<string>,
      newAllowance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      token: PromiseOrValue<string>,
      thresholds: IArcadeTreasury.SpendThresholdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    smallSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveLargeSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveMediumSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveSmallSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchCalls(
      targets: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gscApprove(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gscSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    largeSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mediumSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGSCAllowance(
      token: PromiseOrValue<string>,
      newAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setThreshold(
      token: PromiseOrValue<string>,
      thresholds: IArcadeTreasury.SpendThresholdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    smallSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveLargeSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveMediumSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveSmallSpend(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchCalls(
      targets: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gscApprove(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gscSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    largeSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mediumSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGSCAllowance(
      token: PromiseOrValue<string>,
      newAllowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      token: PromiseOrValue<string>,
      thresholds: IArcadeTreasury.SpendThresholdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    smallSpend(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
