/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace NFTBoostVaultStorage {
  export type RegistrationStruct = {
    amount: PromiseOrValue<BigNumberish>;
    latestVotingPower: PromiseOrValue<BigNumberish>;
    withdrawn: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    delegatee: PromiseOrValue<string>;
  };

  export type RegistrationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    amount: BigNumber;
    latestVotingPower: BigNumber;
    withdrawn: BigNumber;
    tokenId: BigNumber;
    tokenAddress: string;
    delegatee: string;
  };
}

export interface INFTBoostVaultInterface extends utils.Interface {
  functions: {
    "addNftAndDelegate(uint128,uint128,address,address)": FunctionFragment;
    "addTokens(uint128)": FunctionFragment;
    "airdropReceive(address,uint128,address)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "getAirdropContract()": FunctionFragment;
    "getIsLocked()": FunctionFragment;
    "getMultiplier(address,uint128)": FunctionFragment;
    "getRegistration(address)": FunctionFragment;
    "setAirdropContract(address)": FunctionFragment;
    "setMultiplier(address,uint128,uint128)": FunctionFragment;
    "unlock()": FunctionFragment;
    "updateNft(uint128,address)": FunctionFragment;
    "updateVotingPower(address[])": FunctionFragment;
    "withdraw(uint128)": FunctionFragment;
    "withdrawNft()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNftAndDelegate"
      | "addTokens"
      | "airdropReceive"
      | "delegate"
      | "getAirdropContract"
      | "getIsLocked"
      | "getMultiplier"
      | "getRegistration"
      | "setAirdropContract"
      | "setMultiplier"
      | "unlock"
      | "updateNft"
      | "updateVotingPower"
      | "withdraw"
      | "withdrawNft"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNftAndDelegate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropReceive",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAirdropContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiplier",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateNft",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingPower",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addNftAndDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "airdropReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft",
    data: BytesLike
  ): Result;

  events: {
    "AirdropContractUpdated(address)": EventFragment;
    "MultiplierSet(address,uint128,uint128)": EventFragment;
    "WithdrawalsUnlocked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiplierSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalsUnlocked"): EventFragment;
}

export interface AirdropContractUpdatedEventObject {
  newAirdropContract: string;
}
export type AirdropContractUpdatedEvent = TypedEvent<
  [string],
  AirdropContractUpdatedEventObject
>;

export type AirdropContractUpdatedEventFilter =
  TypedEventFilter<AirdropContractUpdatedEvent>;

export interface MultiplierSetEventObject {
  tokenAddress: string;
  tokenId: BigNumber;
  multiplier: BigNumber;
}
export type MultiplierSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  MultiplierSetEventObject
>;

export type MultiplierSetEventFilter = TypedEventFilter<MultiplierSetEvent>;

export interface WithdrawalsUnlockedEventObject {}
export type WithdrawalsUnlockedEvent = TypedEvent<
  [],
  WithdrawalsUnlockedEventObject
>;

export type WithdrawalsUnlockedEventFilter =
  TypedEventFilter<WithdrawalsUnlockedEvent>;

export interface INFTBoostVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INFTBoostVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNftAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    airdropReceive(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAirdropContract(overrides?: CallOverrides): Promise<[string]>;

    getIsLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegistration(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTBoostVaultStorage.RegistrationStructOutput]>;

    setAirdropContract(
      _newAirdropContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      multiplierValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNft(
      newTokenId: PromiseOrValue<BigNumberish>,
      newTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVotingPower(
      userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNftAndDelegate(
    amount: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    delegatee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokens(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  airdropReceive(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    delegatee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegate(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAirdropContract(overrides?: CallOverrides): Promise<string>;

  getIsLocked(overrides?: CallOverrides): Promise<BigNumber>;

  getMultiplier(
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegistration(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTBoostVaultStorage.RegistrationStructOutput>;

  setAirdropContract(
    _newAirdropContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMultiplier(
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    multiplierValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNft(
    newTokenId: PromiseOrValue<BigNumberish>,
    newTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVotingPower(
    userAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNft(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNftAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      delegatee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropReceive(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAirdropContract(overrides?: CallOverrides): Promise<string>;

    getIsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistration(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTBoostVaultStorage.RegistrationStructOutput>;

    setAirdropContract(
      _newAirdropContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      multiplierValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(overrides?: CallOverrides): Promise<void>;

    updateNft(
      newTokenId: PromiseOrValue<BigNumberish>,
      newTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVotingPower(
      userAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNft(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AirdropContractUpdated(address)"(
      newAirdropContract?: null
    ): AirdropContractUpdatedEventFilter;
    AirdropContractUpdated(
      newAirdropContract?: null
    ): AirdropContractUpdatedEventFilter;

    "MultiplierSet(address,uint128,uint128)"(
      tokenAddress?: null,
      tokenId?: null,
      multiplier?: null
    ): MultiplierSetEventFilter;
    MultiplierSet(
      tokenAddress?: null,
      tokenId?: null,
      multiplier?: null
    ): MultiplierSetEventFilter;

    "WithdrawalsUnlocked()"(): WithdrawalsUnlockedEventFilter;
    WithdrawalsUnlocked(): WithdrawalsUnlockedEventFilter;
  };

  estimateGas: {
    addNftAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    airdropReceive(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAirdropContract(overrides?: CallOverrides): Promise<BigNumber>;

    getIsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistration(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAirdropContract(
      _newAirdropContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      multiplierValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNft(
      newTokenId: PromiseOrValue<BigNumberish>,
      newTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVotingPower(
      userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNftAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    airdropReceive(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAirdropContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistration(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAirdropContract(
      _newAirdropContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMultiplier(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      multiplierValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNft(
      newTokenId: PromiseOrValue<BigNumberish>,
      newTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingPower(
      userAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNft(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
