/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ArcadeTokenDistributorInterface extends utils.Interface {
  functions: {
    "arcadeToken()": FunctionFragment;
    "communityAirdropAmount()": FunctionFragment;
    "communityAirdropSent()": FunctionFragment;
    "communityRewardsAmount()": FunctionFragment;
    "communityRewardsSent()": FunctionFragment;
    "devPartnerAmount()": FunctionFragment;
    "devPartnerSent()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "toCommunityAirdrop(address)": FunctionFragment;
    "toCommunityRewards(address)": FunctionFragment;
    "toDevPartner(address)": FunctionFragment;
    "toPartnerVesting(address)": FunctionFragment;
    "toTeamVesting(address)": FunctionFragment;
    "toTreasury(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAmount()": FunctionFragment;
    "treasurySent()": FunctionFragment;
    "vestingPartnerAmount()": FunctionFragment;
    "vestingPartnerSent()": FunctionFragment;
    "vestingTeamAmount()": FunctionFragment;
    "vestingTeamSent()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arcadeToken"
      | "communityAirdropAmount"
      | "communityAirdropSent"
      | "communityRewardsAmount"
      | "communityRewardsSent"
      | "devPartnerAmount"
      | "devPartnerSent"
      | "owner"
      | "renounceOwnership"
      | "setToken"
      | "toCommunityAirdrop"
      | "toCommunityRewards"
      | "toDevPartner"
      | "toPartnerVesting"
      | "toTeamVesting"
      | "toTreasury"
      | "transferOwnership"
      | "treasuryAmount"
      | "treasurySent"
      | "vestingPartnerAmount"
      | "vestingPartnerSent"
      | "vestingTeamAmount"
      | "vestingTeamSent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arcadeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityAirdropAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityAirdropSent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityRewardsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityRewardsSent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devPartnerAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devPartnerSent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toCommunityAirdrop",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toCommunityRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toDevPartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toPartnerVesting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toTeamVesting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasurySent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPartnerAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPartnerSent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingTeamAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingTeamSent",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "arcadeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityAirdropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityAirdropSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityRewardsSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devPartnerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devPartnerSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toCommunityAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toCommunityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toDevPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toPartnerVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toTeamVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toTreasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasurySent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingPartnerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingPartnerSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingTeamAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingTeamSent",
    data: BytesLike
  ): Result;

  events: {
    "Distribute(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Distribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DistributeEventObject {
  token: string;
  recipient: string;
  amount: BigNumber;
}
export type DistributeEvent = TypedEvent<
  [string, string, BigNumber],
  DistributeEventObject
>;

export type DistributeEventFilter = TypedEventFilter<DistributeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ArcadeTokenDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArcadeTokenDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arcadeToken(overrides?: CallOverrides): Promise<[string]>;

    communityAirdropAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    communityAirdropSent(overrides?: CallOverrides): Promise<[boolean]>;

    communityRewardsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    communityRewardsSent(overrides?: CallOverrides): Promise<[boolean]>;

    devPartnerAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    devPartnerSent(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _arcadeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toCommunityAirdrop(
      _communityAirdrop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toCommunityRewards(
      _communityRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toDevPartner(
      _devPartner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toPartnerVesting(
      _vestingPartner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toTeamVesting(
      _vestingTeam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasurySent(overrides?: CallOverrides): Promise<[boolean]>;

    vestingPartnerAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingPartnerSent(overrides?: CallOverrides): Promise<[boolean]>;

    vestingTeamAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingTeamSent(overrides?: CallOverrides): Promise<[boolean]>;
  };

  arcadeToken(overrides?: CallOverrides): Promise<string>;

  communityAirdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

  communityAirdropSent(overrides?: CallOverrides): Promise<boolean>;

  communityRewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  communityRewardsSent(overrides?: CallOverrides): Promise<boolean>;

  devPartnerAmount(overrides?: CallOverrides): Promise<BigNumber>;

  devPartnerSent(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _arcadeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toCommunityAirdrop(
    _communityAirdrop: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toCommunityRewards(
    _communityRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toDevPartner(
    _devPartner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toPartnerVesting(
    _vestingPartner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toTeamVesting(
    _vestingTeam: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  treasurySent(overrides?: CallOverrides): Promise<boolean>;

  vestingPartnerAmount(overrides?: CallOverrides): Promise<BigNumber>;

  vestingPartnerSent(overrides?: CallOverrides): Promise<boolean>;

  vestingTeamAmount(overrides?: CallOverrides): Promise<BigNumber>;

  vestingTeamSent(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    arcadeToken(overrides?: CallOverrides): Promise<string>;

    communityAirdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

    communityAirdropSent(overrides?: CallOverrides): Promise<boolean>;

    communityRewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    communityRewardsSent(overrides?: CallOverrides): Promise<boolean>;

    devPartnerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    devPartnerSent(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setToken(
      _arcadeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toCommunityAirdrop(
      _communityAirdrop: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toCommunityRewards(
      _communityRewards: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toDevPartner(
      _devPartner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toPartnerVesting(
      _vestingPartner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toTeamVesting(
      _vestingTeam: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasurySent(overrides?: CallOverrides): Promise<boolean>;

    vestingPartnerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vestingPartnerSent(overrides?: CallOverrides): Promise<boolean>;

    vestingTeamAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vestingTeamSent(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Distribute(address,address,uint256)"(
      token?: null,
      recipient?: null,
      amount?: null
    ): DistributeEventFilter;
    Distribute(
      token?: null,
      recipient?: null,
      amount?: null
    ): DistributeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    arcadeToken(overrides?: CallOverrides): Promise<BigNumber>;

    communityAirdropAmount(overrides?: CallOverrides): Promise<BigNumber>;

    communityAirdropSent(overrides?: CallOverrides): Promise<BigNumber>;

    communityRewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    communityRewardsSent(overrides?: CallOverrides): Promise<BigNumber>;

    devPartnerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    devPartnerSent(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _arcadeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toCommunityAirdrop(
      _communityAirdrop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toCommunityRewards(
      _communityRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toDevPartner(
      _devPartner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toPartnerVesting(
      _vestingPartner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toTeamVesting(
      _vestingTeam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasurySent(overrides?: CallOverrides): Promise<BigNumber>;

    vestingPartnerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vestingPartnerSent(overrides?: CallOverrides): Promise<BigNumber>;

    vestingTeamAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vestingTeamSent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    arcadeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    communityAirdropAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityAirdropSent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityRewardsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityRewardsSent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devPartnerAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devPartnerSent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _arcadeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toCommunityAirdrop(
      _communityAirdrop: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toCommunityRewards(
      _communityRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toDevPartner(
      _devPartner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toPartnerVesting(
      _vestingPartner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toTeamVesting(
      _vestingTeam: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasurySent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingPartnerAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingPartnerSent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingTeamAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingTeamSent(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
