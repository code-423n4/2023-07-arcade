/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace LoanLibrary {
  export type LoanTermsStruct = {
    durationSecs: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    numInstallments: PromiseOrValue<BigNumberish>;
    interestRate: PromiseOrValue<BigNumberish>;
    principal: PromiseOrValue<BigNumberish>;
    collateralAddress: PromiseOrValue<string>;
    collateralId: PromiseOrValue<BigNumberish>;
    payableCurrency: PromiseOrValue<string>;
  };

  export type LoanTermsStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    durationSecs: number;
    deadline: number;
    numInstallments: number;
    interestRate: BigNumber;
    principal: BigNumber;
    collateralAddress: string;
    collateralId: BigNumber;
    payableCurrency: string;
  };

  export type LoanDataStruct = {
    state: PromiseOrValue<BigNumberish>;
    numInstallmentsPaid: PromiseOrValue<BigNumberish>;
    startDate: PromiseOrValue<BigNumberish>;
    terms: LoanLibrary.LoanTermsStruct;
    balance: PromiseOrValue<BigNumberish>;
    balancePaid: PromiseOrValue<BigNumberish>;
    lateFeesAccrued: PromiseOrValue<BigNumberish>;
  };

  export type LoanDataStructOutput = [
    number,
    number,
    BigNumber,
    LoanLibrary.LoanTermsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    numInstallmentsPaid: number;
    startDate: BigNumber;
    terms: LoanLibrary.LoanTermsStructOutput;
    balance: BigNumber;
    balancePaid: BigNumber;
    lateFeesAccrued: BigNumber;
  };
}

export interface ILoanCoreInterface extends utils.Interface {
  functions: {
    "borrowerNote()": FunctionFragment;
    "cancelNonce(uint160)": FunctionFragment;
    "claim(uint256,uint256)": FunctionFragment;
    "consumeNonce(address,uint160)": FunctionFragment;
    "feeController()": FunctionFragment;
    "getLoan(uint256)": FunctionFragment;
    "isNonceUsed(address,uint160)": FunctionFragment;
    "lenderNote()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "repayPart(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "rollover(uint256,address,address,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),uint256,uint256,uint256,uint256)": FunctionFragment;
    "startLoan(address,address,(uint32,uint32,uint24,uint160,uint256,address,uint256,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowerNote"
      | "cancelNonce"
      | "claim"
      | "consumeNonce"
      | "feeController"
      | "getLoan"
      | "isNonceUsed"
      | "lenderNote"
      | "repay"
      | "repayPart"
      | "rollover"
      | "startLoan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowerNote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelNonce",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeNonce",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNonceUsed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderNote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayPart",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rollover",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      LoanLibrary.LoanTermsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      LoanLibrary.LoanTermsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowerNote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNonceUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lenderNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayPart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startLoan", data: BytesLike): Result;

  events: {
    "FeesClaimed(address,address,uint256)": EventFragment;
    "InstallmentPaymentReceived(uint256,uint256,uint256)": EventFragment;
    "LoanClaimed(uint256)": EventFragment;
    "LoanCreated(tuple,uint256)": EventFragment;
    "LoanRepaid(uint256)": EventFragment;
    "LoanRolledOver(uint256,uint256)": EventFragment;
    "LoanStarted(uint256,address,address)": EventFragment;
    "NonceUsed(address,uint160)": EventFragment;
    "SetFeeController(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstallmentPaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRepaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRolledOver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeController"): EventFragment;
}

export interface FeesClaimedEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type FeesClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  FeesClaimedEventObject
>;

export type FeesClaimedEventFilter = TypedEventFilter<FeesClaimedEvent>;

export interface InstallmentPaymentReceivedEventObject {
  loanId: BigNumber;
  repaidAmount: BigNumber;
  remBalance: BigNumber;
}
export type InstallmentPaymentReceivedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  InstallmentPaymentReceivedEventObject
>;

export type InstallmentPaymentReceivedEventFilter =
  TypedEventFilter<InstallmentPaymentReceivedEvent>;

export interface LoanClaimedEventObject {
  loanId: BigNumber;
}
export type LoanClaimedEvent = TypedEvent<[BigNumber], LoanClaimedEventObject>;

export type LoanClaimedEventFilter = TypedEventFilter<LoanClaimedEvent>;

export interface LoanCreatedEventObject {
  terms: LoanLibrary.LoanTermsStructOutput;
  loanId: BigNumber;
}
export type LoanCreatedEvent = TypedEvent<
  [LoanLibrary.LoanTermsStructOutput, BigNumber],
  LoanCreatedEventObject
>;

export type LoanCreatedEventFilter = TypedEventFilter<LoanCreatedEvent>;

export interface LoanRepaidEventObject {
  loanId: BigNumber;
}
export type LoanRepaidEvent = TypedEvent<[BigNumber], LoanRepaidEventObject>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export interface LoanRolledOverEventObject {
  oldLoanId: BigNumber;
  newLoanId: BigNumber;
}
export type LoanRolledOverEvent = TypedEvent<
  [BigNumber, BigNumber],
  LoanRolledOverEventObject
>;

export type LoanRolledOverEventFilter = TypedEventFilter<LoanRolledOverEvent>;

export interface LoanStartedEventObject {
  loanId: BigNumber;
  lender: string;
  borrower: string;
}
export type LoanStartedEvent = TypedEvent<
  [BigNumber, string, string],
  LoanStartedEventObject
>;

export type LoanStartedEventFilter = TypedEventFilter<LoanStartedEvent>;

export interface NonceUsedEventObject {
  user: string;
  nonce: BigNumber;
}
export type NonceUsedEvent = TypedEvent<
  [string, BigNumber],
  NonceUsedEventObject
>;

export type NonceUsedEventFilter = TypedEventFilter<NonceUsedEvent>;

export interface SetFeeControllerEventObject {
  feeController: string;
}
export type SetFeeControllerEvent = TypedEvent<
  [string],
  SetFeeControllerEventObject
>;

export type SetFeeControllerEventFilter =
  TypedEventFilter<SetFeeControllerEvent>;

export interface ILoanCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILoanCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowerNote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      loanId: PromiseOrValue<BigNumberish>,
      currentInstallmentPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consumeNonce(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLoan(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [LoanLibrary.LoanDataStructOutput] & {
        loanData: LoanLibrary.LoanDataStructOutput;
      }
    >;

    isNonceUsed(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lenderNote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayPart(
      _loanId: PromiseOrValue<BigNumberish>,
      _currentMissedPayments: PromiseOrValue<BigNumberish>,
      _paymentToPrincipal: PromiseOrValue<BigNumberish>,
      _paymentToInterest: PromiseOrValue<BigNumberish>,
      _paymentToLateFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollover(
      oldLoanId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      lender: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      _settledAmount: PromiseOrValue<BigNumberish>,
      _amountToOldLender: PromiseOrValue<BigNumberish>,
      _amountToLender: PromiseOrValue<BigNumberish>,
      _amountToBorrower: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startLoan(
      lender: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  borrowerNote(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelNonce(
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    loanId: PromiseOrValue<BigNumberish>,
    currentInstallmentPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consumeNonce(
    user: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeController(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLoan(
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LoanLibrary.LoanDataStructOutput>;

  isNonceUsed(
    user: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lenderNote(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayPart(
    _loanId: PromiseOrValue<BigNumberish>,
    _currentMissedPayments: PromiseOrValue<BigNumberish>,
    _paymentToPrincipal: PromiseOrValue<BigNumberish>,
    _paymentToInterest: PromiseOrValue<BigNumberish>,
    _paymentToLateFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollover(
    oldLoanId: PromiseOrValue<BigNumberish>,
    borrower: PromiseOrValue<string>,
    lender: PromiseOrValue<string>,
    terms: LoanLibrary.LoanTermsStruct,
    _settledAmount: PromiseOrValue<BigNumberish>,
    _amountToOldLender: PromiseOrValue<BigNumberish>,
    _amountToLender: PromiseOrValue<BigNumberish>,
    _amountToBorrower: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startLoan(
    lender: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    terms: LoanLibrary.LoanTermsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowerNote(overrides?: CallOverrides): Promise<string>;

    cancelNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      loanId: PromiseOrValue<BigNumberish>,
      currentInstallmentPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    consumeNonce(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeController(overrides?: CallOverrides): Promise<string>;

    getLoan(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LoanLibrary.LoanDataStructOutput>;

    isNonceUsed(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lenderNote(overrides?: CallOverrides): Promise<string>;

    repay(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayPart(
      _loanId: PromiseOrValue<BigNumberish>,
      _currentMissedPayments: PromiseOrValue<BigNumberish>,
      _paymentToPrincipal: PromiseOrValue<BigNumberish>,
      _paymentToInterest: PromiseOrValue<BigNumberish>,
      _paymentToLateFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rollover(
      oldLoanId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      lender: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      _settledAmount: PromiseOrValue<BigNumberish>,
      _amountToOldLender: PromiseOrValue<BigNumberish>,
      _amountToLender: PromiseOrValue<BigNumberish>,
      _amountToBorrower: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startLoan(
      lender: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FeesClaimed(address,address,uint256)"(
      token?: null,
      to?: null,
      amount?: null
    ): FeesClaimedEventFilter;
    FeesClaimed(token?: null, to?: null, amount?: null): FeesClaimedEventFilter;

    "InstallmentPaymentReceived(uint256,uint256,uint256)"(
      loanId?: null,
      repaidAmount?: null,
      remBalance?: null
    ): InstallmentPaymentReceivedEventFilter;
    InstallmentPaymentReceived(
      loanId?: null,
      repaidAmount?: null,
      remBalance?: null
    ): InstallmentPaymentReceivedEventFilter;

    "LoanClaimed(uint256)"(loanId?: null): LoanClaimedEventFilter;
    LoanClaimed(loanId?: null): LoanClaimedEventFilter;

    "LoanCreated(tuple,uint256)"(
      terms?: null,
      loanId?: null
    ): LoanCreatedEventFilter;
    LoanCreated(terms?: null, loanId?: null): LoanCreatedEventFilter;

    "LoanRepaid(uint256)"(loanId?: null): LoanRepaidEventFilter;
    LoanRepaid(loanId?: null): LoanRepaidEventFilter;

    "LoanRolledOver(uint256,uint256)"(
      oldLoanId?: null,
      newLoanId?: null
    ): LoanRolledOverEventFilter;
    LoanRolledOver(
      oldLoanId?: null,
      newLoanId?: null
    ): LoanRolledOverEventFilter;

    "LoanStarted(uint256,address,address)"(
      loanId?: null,
      lender?: null,
      borrower?: null
    ): LoanStartedEventFilter;
    LoanStarted(
      loanId?: null,
      lender?: null,
      borrower?: null
    ): LoanStartedEventFilter;

    "NonceUsed(address,uint160)"(
      user?: PromiseOrValue<string> | null,
      nonce?: null
    ): NonceUsedEventFilter;
    NonceUsed(
      user?: PromiseOrValue<string> | null,
      nonce?: null
    ): NonceUsedEventFilter;

    "SetFeeController(address)"(
      feeController?: null
    ): SetFeeControllerEventFilter;
    SetFeeController(feeController?: null): SetFeeControllerEventFilter;
  };

  estimateGas: {
    borrowerNote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      loanId: PromiseOrValue<BigNumberish>,
      currentInstallmentPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consumeNonce(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLoan(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNonceUsed(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderNote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayPart(
      _loanId: PromiseOrValue<BigNumberish>,
      _currentMissedPayments: PromiseOrValue<BigNumberish>,
      _paymentToPrincipal: PromiseOrValue<BigNumberish>,
      _paymentToInterest: PromiseOrValue<BigNumberish>,
      _paymentToLateFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollover(
      oldLoanId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      lender: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      _settledAmount: PromiseOrValue<BigNumberish>,
      _amountToOldLender: PromiseOrValue<BigNumberish>,
      _amountToLender: PromiseOrValue<BigNumberish>,
      _amountToBorrower: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startLoan(
      lender: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowerNote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      loanId: PromiseOrValue<BigNumberish>,
      currentInstallmentPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consumeNonce(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLoan(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNonceUsed(
      user: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderNote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayPart(
      _loanId: PromiseOrValue<BigNumberish>,
      _currentMissedPayments: PromiseOrValue<BigNumberish>,
      _paymentToPrincipal: PromiseOrValue<BigNumberish>,
      _paymentToInterest: PromiseOrValue<BigNumberish>,
      _paymentToLateFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollover(
      oldLoanId: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      lender: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      _settledAmount: PromiseOrValue<BigNumberish>,
      _amountToOldLender: PromiseOrValue<BigNumberish>,
      _amountToLender: PromiseOrValue<BigNumberish>,
      _amountToBorrower: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startLoan(
      lender: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      terms: LoanLibrary.LoanTermsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
