/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IFeeControllerInterface extends utils.Interface {
  functions: {
    "getOriginationFee()": FunctionFragment;
    "getRolloverFee()": FunctionFragment;
    "setOriginationFee(uint256)": FunctionFragment;
    "setRolloverFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOriginationFee"
      | "getRolloverFee"
      | "setOriginationFee"
      | "setRolloverFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOriginationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRolloverFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRolloverFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolloverFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRolloverFee",
    data: BytesLike
  ): Result;

  events: {
    "UpdateOriginationFee(uint256)": EventFragment;
    "UpdateRolloverFee(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateOriginationFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRolloverFee"): EventFragment;
}

export interface UpdateOriginationFeeEventObject {
  _newFee: BigNumber;
}
export type UpdateOriginationFeeEvent = TypedEvent<
  [BigNumber],
  UpdateOriginationFeeEventObject
>;

export type UpdateOriginationFeeEventFilter =
  TypedEventFilter<UpdateOriginationFeeEvent>;

export interface UpdateRolloverFeeEventObject {
  _newFee: BigNumber;
}
export type UpdateRolloverFeeEvent = TypedEvent<
  [BigNumber],
  UpdateRolloverFeeEventObject
>;

export type UpdateRolloverFeeEventFilter =
  TypedEventFilter<UpdateRolloverFeeEvent>;

export interface IFeeController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOriginationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRolloverFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

  getRolloverFee(overrides?: CallOverrides): Promise<BigNumber>;

  setOriginationFee(
    _originationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRolloverFee(
    _rolloverFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverFee(overrides?: CallOverrides): Promise<BigNumber>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UpdateOriginationFee(uint256)"(
      _newFee?: null
    ): UpdateOriginationFeeEventFilter;
    UpdateOriginationFee(_newFee?: null): UpdateOriginationFeeEventFilter;

    "UpdateRolloverFee(uint256)"(_newFee?: null): UpdateRolloverFeeEventFilter;
    UpdateRolloverFee(_newFee?: null): UpdateRolloverFeeEventFilter;
  };

  estimateGas: {
    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverFee(overrides?: CallOverrides): Promise<BigNumber>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOriginationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolloverFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
