/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface FeeControllerInterface extends utils.Interface {
  functions: {
    "MAX_ORIGINATION_FEE()": FunctionFragment;
    "MAX_ROLLOVER_FEE()": FunctionFragment;
    "getOriginationFee()": FunctionFragment;
    "getRolloverFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOriginationFee(uint256)": FunctionFragment;
    "setRolloverFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_ORIGINATION_FEE"
      | "MAX_ROLLOVER_FEE"
      | "getOriginationFee"
      | "getRolloverFee"
      | "owner"
      | "renounceOwnership"
      | "setOriginationFee"
      | "setRolloverFee"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_ORIGINATION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ROLLOVER_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOriginationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRolloverFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRolloverFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ORIGINATION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ROLLOVER_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolloverFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRolloverFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateOriginationFee(uint256)": EventFragment;
    "UpdateRolloverFee(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOriginationFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRolloverFee"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdateOriginationFeeEventObject {
  _newFee: BigNumber;
}
export type UpdateOriginationFeeEvent = TypedEvent<
  [BigNumber],
  UpdateOriginationFeeEventObject
>;

export type UpdateOriginationFeeEventFilter =
  TypedEventFilter<UpdateOriginationFeeEvent>;

export interface UpdateRolloverFeeEventObject {
  _newFee: BigNumber;
}
export type UpdateRolloverFeeEvent = TypedEvent<
  [BigNumber],
  UpdateRolloverFeeEventObject
>;

export type UpdateRolloverFeeEventFilter =
  TypedEventFilter<UpdateRolloverFeeEvent>;

export interface FeeController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_ORIGINATION_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ROLLOVER_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOriginationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRolloverFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_ORIGINATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ROLLOVER_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

  getRolloverFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOriginationFee(
    _originationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRolloverFee(
    _rolloverFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_ORIGINATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ROLLOVER_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdateOriginationFee(uint256)"(
      _newFee?: null
    ): UpdateOriginationFeeEventFilter;
    UpdateOriginationFee(_newFee?: null): UpdateOriginationFeeEventFilter;

    "UpdateRolloverFee(uint256)"(_newFee?: null): UpdateRolloverFeeEventFilter;
    UpdateRolloverFee(_newFee?: null): UpdateRolloverFeeEventFilter;
  };

  estimateGas: {
    MAX_ORIGINATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ROLLOVER_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    getOriginationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ORIGINATION_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ROLLOVER_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOriginationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolloverFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOriginationFee(
      _originationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRolloverFee(
      _rolloverFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
