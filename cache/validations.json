{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:19",
        "version": {
          "withMetadata": "634a1ae3590b5c70c864a2d4d43818aa5966a3544713741ce7f40c3d97a392e3",
          "withoutMetadata": "6164c443f1b075cf48111d3a4d0991851bf874cd6d24bc5a4a4468e6a0cb409e",
          "linkedWithoutMetadata": "6164c443f1b075cf48111d3a4d0991851bf874cd6d24bc5a4a4468e6a0cb409e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:14",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBadgeDescriptor.sol:IBadgeDescriptor": {
        "src": "contracts/interfaces/IBadgeDescriptor.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(uint256)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IReputationBadge.sol:IReputationBadge": {
        "src": "contracts/interfaces/IReputationBadge.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256,uint256,bytes32[])",
          "uri(uint256)",
          "publishRoots(struct IReputationBadge.ClaimData[])",
          "withdrawFees(address)",
          "setDescriptor(address)",
          "amountClaimed(address,uint256)",
          "claimRoots(uint256)",
          "claimExpirations(uint256)",
          "mintPrices(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/nft/ReputationBadge.sol:ReputationBadge": {
        "src": "contracts/nft/ReputationBadge.sol:39",
        "version": {
          "withMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3",
          "withoutMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3",
          "linkedWithoutMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3"
        },
        "inherit": [
          "contracts/interfaces/IReputationBadge.sol:IReputationBadge",
          "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "(address,address)",
          "mint(address,uint256,uint256,uint256,bytes32[])",
          "uri(uint256)",
          "publishRoots(struct IReputationBadge.ClaimData[])",
          "withdrawFees(address)",
          "setDescriptor(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReputationBadge",
            "src": "contracts/nft/ReputationBadge.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "descriptor",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IBadgeDescriptor)2395",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:41"
            },
            {
              "label": "amountClaimed",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:49"
            },
            {
              "label": "claimRoots",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:52"
            },
            {
              "label": "claimExpirations",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint48)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:55"
            },
            {
              "label": "mintPrices",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBadgeDescriptor)2395": {
              "label": "contract IBadgeDescriptor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint48)": {
              "label": "mapping(uint256 => uint48)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBadgeDescriptor.sol:IBadgeDescriptor": {
        "src": "contracts/interfaces/IBadgeDescriptor.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(uint256)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/nft/BadgeDescriptor.sol:BadgeDescriptor": {
        "src": "contracts/nft/BadgeDescriptor.sol:17",
        "version": {
          "withMetadata": "8e51966b76c1c726eef1070e9391f23668f272f01831bc528c53027c422dde16",
          "withoutMetadata": "2bba92810a5491d602b35a7de36b1aabbede1f22cd9e49149f6bf582d0f5965e",
          "linkedWithoutMetadata": "2bba92810a5491d602b35a7de36b1aabbede1f22cd9e49149f6bf582d0f5965e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/IBadgeDescriptor.sol:IBadgeDescriptor"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string)",
          "tokenURI(uint256)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BadgeDescriptor",
            "src": "contracts/nft/BadgeDescriptor.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "baseURI",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "BadgeDescriptor",
              "src": "contracts/nft/BadgeDescriptor.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:14",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Authorizable.sol:Authorizable": {
        "src": "contracts/external/council/libraries/Authorizable.sol:4",
        "version": {
          "withMetadata": "71fa3ee295473ce46afb517633c3399cbccc4ebc0ef47e77c8330b7c62158399",
          "withoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e",
          "linkedWithoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "isAuthorized(address)",
          "authorize(address)",
          "deauthorize(address)",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authorizable",
            "src": "contracts/external/council/libraries/Authorizable.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/INFTBoostVault.sol:INFTBoostVault": {
        "src": "contracts/interfaces/INFTBoostVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getIsLocked()",
          "getRegistration(address)",
          "getMultiplier(address,uint128)",
          "getAirdropContract()",
          "addNftAndDelegate(uint128,uint128,address,address)",
          "airdropReceive(address,uint128,address)",
          "delegate(address)",
          "withdraw(uint128)",
          "addTokens(uint128)",
          "withdrawNft()",
          "updateNft(uint128,address)",
          "updateVotingPower(address[])",
          "setMultiplier(address,uint128,uint128)",
          "unlock()",
          "setAirdropContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/ArcadeMerkleRewards.sol:ArcadeMerkleRewards": {
        "src": "contracts/libraries/ArcadeMerkleRewards.sol:24",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "claimAndDelegate(address,uint128,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeMerkleRewards",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:57"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "expiration",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:37"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:40"
            },
            {
              "label": "votingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(INFTBoostVault)922",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INFTBoostVault)922": {
              "label": "contract INFTBoostVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/NFTBoostVaultStorage.sol:NFTBoostVaultStorage": {
        "src": "contracts/libraries/NFTBoostVaultStorage.sol:12",
        "version": {
          "withMetadata": "c50e7b87880f5d1281db5f860add9b3f84ec65d69eaf288da741b7d009351ffb",
          "withoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447",
          "linkedWithoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeAirdrop.sol:ArcadeAirdrop": {
        "src": "contracts/token/ArcadeAirdrop.sol:21",
        "version": {
          "withMetadata": "1bf118193f7ac5713a7887682f1791bdc9755628ce28d2893e89a552581979bd",
          "withoutMetadata": "1634adf6686a78c7711a242d2b5aa32fe7eb1fcc01f08129be4feb1d3959e1fa",
          "linkedWithoutMetadata": "1634adf6686a78c7711a242d2b5aa32fe7eb1fcc01f08129be4feb1d3959e1fa"
        },
        "inherit": [
          "contracts/external/council/libraries/Authorizable.sol:Authorizable",
          "contracts/libraries/ArcadeMerkleRewards.sol:ArcadeMerkleRewards"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,bytes32,address,uint256,address)",
          "reclaim(address)",
          "setMerkleRoot(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeAirdrop",
            "src": "contracts/token/ArcadeAirdrop.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:37"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:40"
            },
            {
              "label": "votingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(INFTBoostVault)922",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:43"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INFTBoostVault)922": {
              "label": "contract INFTBoostVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ArcadeTreasury.sol:ArcadeTreasury": {
        "src": "contracts/ArcadeTreasury.sol:44",
        "version": {
          "withMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db",
          "withoutMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db",
          "linkedWithoutMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/IArcadeTreasury.sol:IArcadeTreasury"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "gscSpend(address,uint256,address)",
          "smallSpend(address,uint256,address)",
          "mediumSpend(address,uint256,address)",
          "largeSpend(address,uint256,address)",
          "gscApprove(address,address,uint256)",
          "approveSmallSpend(address,address,uint256)",
          "approveMediumSpend(address,address,uint256)",
          "approveLargeSpend(address,address,uint256)",
          "setThreshold(address,(uint256,uint256,uint256))",
          "setGSCAllowance(address,uint256)",
          "batchCalls(address[],bytes[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeTreasury",
            "src": "contracts/ArcadeTreasury.sol:87"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            },
            {
              "label": "lastAllowanceSet",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint48)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:59"
            },
            {
              "label": "spendThresholds",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(SpendThreshold)2207_storage)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:62"
            },
            {
              "label": "gscAllowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:65"
            },
            {
              "label": "blockExpenditure",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(SpendThreshold)2207_storage)": {
              "label": "mapping(address => struct IArcadeTreasury.SpendThreshold)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint48)": {
              "label": "mapping(address => uint48)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(SpendThreshold)2207_storage": {
              "label": "struct IArcadeTreasury.SpendThreshold",
              "members": [
                {
                  "label": "small",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "medium",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "large",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeTreasury.sol:IArcadeTreasury": {
        "src": "contracts/interfaces/IArcadeTreasury.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gscSpend(address,uint256,address)",
          "smallSpend(address,uint256,address)",
          "mediumSpend(address,uint256,address)",
          "largeSpend(address,uint256,address)",
          "gscApprove(address,address,uint256)",
          "approveSmallSpend(address,address,uint256)",
          "approveMediumSpend(address,address,uint256)",
          "approveLargeSpend(address,address,uint256)",
          "setThreshold(address,(uint256,uint256,uint256))",
          "setGSCAllowance(address,uint256)",
          "batchCalls(address[],bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ArcadeGSCVault.sol:ArcadeGSCVault": {
        "src": "contracts/ArcadeGSCVault.sol:25",
        "version": {
          "withMetadata": "26c7521c435bb61577623d3e8b6175488fe9bcf359fb123ffe00fdb798bb5c15",
          "withoutMetadata": "37505142e050b6c7a8cfc4e730049c827d9e160f02bffa2e50c04b8a76c41860",
          "linkedWithoutMetadata": "37505142e050b6c7a8cfc4e730049c827d9e160f02bffa2e50c04b8a76c41860"
        },
        "inherit": [
          "contracts/external/council/vaults/GSCVault.sol:GSCVault",
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeGSCVault",
            "src": "contracts/ArcadeGSCVault.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "members",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(Member)201_storage)",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:17"
            },
            {
              "label": "coreVoting",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ICoreVoting)34",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:19"
            },
            {
              "label": "votingPowerBound",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:21"
            },
            {
              "label": "idleDuration",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ICoreVoting)34": {
              "label": "contract ICoreVoting",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Member)201_storage)": {
              "label": "mapping(address => struct GSCVault.Member)",
              "numberOfBytes": "32"
            },
            "t_struct(Member)201_storage": {
              "label": "struct GSCVault.Member",
              "members": [
                {
                  "label": "vaults",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "joined",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting": {
        "src": "contracts/external/council/interfaces/ICoreVoting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approvedVaults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault": {
        "src": "contracts/external/council/interfaces/IVotingVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Authorizable.sol:Authorizable": {
        "src": "contracts/external/council/libraries/Authorizable.sol:4",
        "version": {
          "withMetadata": "71fa3ee295473ce46afb517633c3399cbccc4ebc0ef47e77c8330b7c62158399",
          "withoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e",
          "linkedWithoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "isAuthorized(address)",
          "authorize(address)",
          "deauthorize(address)",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authorizable",
            "src": "contracts/external/council/libraries/Authorizable.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/vaults/GSCVault.sol:GSCVault": {
        "src": "contracts/external/council/vaults/GSCVault.sol:15",
        "version": {
          "withMetadata": "dced911acdc58e72849713773171069e99bfec0cff22d85b55d3ec41eb638bb9",
          "withoutMetadata": "3e91c0ca208cf37c6fd321e39d64a93f78e7c1dac7362305fb1f4b825561ab9e",
          "linkedWithoutMetadata": "3e91c0ca208cf37c6fd321e39d64a93f78e7c1dac7362305fb1f4b825561ab9e"
        },
        "inherit": [
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "proveMembership(address[],bytes[])",
          "kick(address,bytes[])",
          "queryVotePower(address,uint256,bytes)",
          "getUserVaults(address)",
          "setCoreVoting(address)",
          "setVotePowerBound(uint256)",
          "setIdleDuration(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSCVault",
            "src": "contracts/external/council/vaults/GSCVault.sol:41"
          },
          {
            "kind": "state-variable-assignment",
            "name": "idleDuration",
            "src": "contracts/external/council/vaults/GSCVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "members",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(Member)201_storage)",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:17"
            },
            {
              "label": "coreVoting",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ICoreVoting)34",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:19"
            },
            {
              "label": "votingPowerBound",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:21"
            },
            {
              "label": "idleDuration",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ICoreVoting)34": {
              "label": "contract ICoreVoting",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Member)201_storage)": {
              "label": "mapping(address => struct GSCVault.Member)",
              "numberOfBytes": "32"
            },
            "t_struct(Member)201_storage": {
              "label": "struct GSCVault.Member",
              "members": [
                {
                  "label": "vaults",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "joined",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/BaseVotingVault.sol:BaseVotingVault": {
        "src": "contracts/BaseVotingVault.sol:24",
        "inherit": [
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [
          "setTimelock(address)",
          "setManager(address)",
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVotingVault",
            "src": "contracts/BaseVotingVault.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/BaseVotingVault.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "staleBlockLag",
            "src": "contracts/BaseVotingVault.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/NFTBoostVault.sol:NFTBoostVault": {
        "src": "contracts/NFTBoostVault.sol:55",
        "version": {
          "withMetadata": "d571c8e6074ab0086b420c420b787fb936322bc8bc2ce3cfe60b43d7133facf5",
          "withoutMetadata": "5cf28d768152b50b094084940371176c88a66ddd3a0a78b9a36a50ef6cf8feca",
          "linkedWithoutMetadata": "5cf28d768152b50b094084940371176c88a66ddd3a0a78b9a36a50ef6cf8feca"
        },
        "inherit": [
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/INFTBoostVault.sol:INFTBoostVault"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage",
          "contracts/libraries/NFTBoostVaultStorage.sol:NFTBoostVaultStorage"
        ],
        "methods": [
          "(address,uint256,address,address)",
          "addNftAndDelegate(uint128,uint128,address,address)",
          "airdropReceive(address,uint128,address)",
          "delegate(address)",
          "withdraw(uint128)",
          "addTokens(uint128)",
          "withdrawNft()",
          "updateNft(uint128,address)",
          "updateVotingPower(address[])",
          "setMultiplier(address,uint128,uint128)",
          "unlock()",
          "setAirdropContract(address)",
          "getIsLocked()",
          "getMultiplier(address,uint128)",
          "getRegistration(address)",
          "getAirdropContract()",
          "onERC1155Received(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTBoostVault",
            "src": "contracts/NFTBoostVault.sol:82"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/History.sol:History": {
        "src": "contracts/external/council/libraries/History.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Storage.sol:Storage": {
        "src": "contracts/external/council/libraries/Storage.sol:6",
        "version": {
          "withMetadata": "4f433fc3039cc66c6476004f5575fcfd25f0eaa738496015482a35b0b3c02e91",
          "withoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5",
          "linkedWithoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPtr(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault": {
        "src": "contracts/interfaces/IBaseVotingVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "setTimelock(address)",
          "setManager(address)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/INFTBoostVault.sol:INFTBoostVault": {
        "src": "contracts/interfaces/INFTBoostVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getIsLocked()",
          "getRegistration(address)",
          "getMultiplier(address,uint128)",
          "getAirdropContract()",
          "addNftAndDelegate(uint128,uint128,address,address)",
          "airdropReceive(address,uint128,address)",
          "delegate(address)",
          "withdraw(uint128)",
          "addTokens(uint128)",
          "withdrawNft()",
          "updateNft(uint128,address)",
          "updateVotingPower(address[])",
          "setMultiplier(address,uint128,uint128)",
          "unlock()",
          "setAirdropContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock": {
        "src": "contracts/libraries/HashedStorageReentrancyBlock.sol:15",
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/NFTBoostVaultStorage.sol:NFTBoostVaultStorage": {
        "src": "contracts/libraries/NFTBoostVaultStorage.sol:12",
        "version": {
          "withMetadata": "c50e7b87880f5d1281db5f860add9b3f84ec65d69eaf288da741b7d009351ffb",
          "withoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447",
          "linkedWithoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ARCDVestingVault.sol:ARCDVestingVault": {
        "src": "contracts/ARCDVestingVault.sol:48",
        "version": {
          "withMetadata": "756b023bcdbc242b955b7289a17480ccea89040410301620eef22f11070ded0d",
          "withoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226",
          "linkedWithoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226"
        },
        "inherit": [
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage",
          "contracts/external/council/libraries/Storage.sol:Storage",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,uint256,address,address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)",
          "claim(uint256)",
          "delegate(address)",
          "claimable(address)",
          "getGrant(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ARCDVestingVault",
            "src": "contracts/ARCDVestingVault.sol:66"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/BaseVotingVault.sol:BaseVotingVault": {
        "src": "contracts/BaseVotingVault.sol:24",
        "inherit": [
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [
          "setTimelock(address)",
          "setManager(address)",
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVotingVault",
            "src": "contracts/BaseVotingVault.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/BaseVotingVault.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "staleBlockLag",
            "src": "contracts/BaseVotingVault.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ImmutableVestingVault.sol:ImmutableVestingVault": {
        "src": "contracts/ImmutableVestingVault.sol:18",
        "version": {
          "withMetadata": "ced9ed75a5b74132054020f7bb9e7a024c8713a17d9332b41b5f379ea2022970",
          "withoutMetadata": "876cfb15c296f1aafee805750b33154bd4fce24ea131c9005aa0dfd45503ef28",
          "linkedWithoutMetadata": "876cfb15c296f1aafee805750b33154bd4fce24ea131c9005aa0dfd45503ef28"
        },
        "inherit": [
          "contracts/ARCDVestingVault.sol:ARCDVestingVault",
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address,address)",
          "revokeGrant(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ImmutableVestingVault",
            "src": "contracts/ImmutableVestingVault.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/History.sol:History": {
        "src": "contracts/external/council/libraries/History.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Storage.sol:Storage": {
        "src": "contracts/external/council/libraries/Storage.sol:6",
        "version": {
          "withMetadata": "4f433fc3039cc66c6476004f5575fcfd25f0eaa738496015482a35b0b3c02e91",
          "withoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5",
          "linkedWithoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPtr(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault": {
        "src": "contracts/interfaces/IARCDVestingVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGrant(address)",
          "claimable(address)",
          "claim(uint256)",
          "delegate(address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault": {
        "src": "contracts/interfaces/IBaseVotingVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "setTimelock(address)",
          "setManager(address)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage": {
        "src": "contracts/libraries/ARCDVestingVaultStorage.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock": {
        "src": "contracts/libraries/HashedStorageReentrancyBlock.sol:15",
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ARCDVestingVault.sol:ARCDVestingVault": {
        "src": "contracts/ARCDVestingVault.sol:48",
        "version": {
          "withMetadata": "756b023bcdbc242b955b7289a17480ccea89040410301620eef22f11070ded0d",
          "withoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226",
          "linkedWithoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226"
        },
        "inherit": [
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage",
          "contracts/external/council/libraries/Storage.sol:Storage",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,uint256,address,address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)",
          "claim(uint256)",
          "delegate(address)",
          "claimable(address)",
          "getGrant(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ARCDVestingVault",
            "src": "contracts/ARCDVestingVault.sol:66"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/BaseVotingVault.sol:BaseVotingVault": {
        "src": "contracts/BaseVotingVault.sol:24",
        "inherit": [
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [
          "setTimelock(address)",
          "setManager(address)",
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVotingVault",
            "src": "contracts/BaseVotingVault.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/BaseVotingVault.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "staleBlockLag",
            "src": "contracts/BaseVotingVault.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/History.sol:History": {
        "src": "contracts/external/council/libraries/History.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Storage.sol:Storage": {
        "src": "contracts/external/council/libraries/Storage.sol:6",
        "version": {
          "withMetadata": "4f433fc3039cc66c6476004f5575fcfd25f0eaa738496015482a35b0b3c02e91",
          "withoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5",
          "linkedWithoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPtr(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault": {
        "src": "contracts/interfaces/IARCDVestingVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGrant(address)",
          "claimable(address)",
          "claim(uint256)",
          "delegate(address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault": {
        "src": "contracts/interfaces/IBaseVotingVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "setTimelock(address)",
          "setManager(address)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage": {
        "src": "contracts/libraries/ARCDVestingVaultStorage.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock": {
        "src": "contracts/libraries/HashedStorageReentrancyBlock.sol:15",
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/external/council/features/Timelock.sol:Timelock": {
        "src": "contracts/external/council/features/Timelock.sol:10",
        "version": {
          "withMetadata": "140485bbea58d8b4352f0339933d48e48b1690401a21640a84c2e9cc4af3fb0d",
          "withoutMetadata": "eac9e7c5ea408ad88fbbab3afcd6d3a03fa2646e3fb262d5ba7fd3876859d49c",
          "linkedWithoutMetadata": "eac9e7c5ea408ad88fbbab3afcd6d3a03fa2646e3fb262d5ba7fd3876859d49c"
        },
        "inherit": [
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "registerCall(bytes32)",
          "stopCall(bytes32)",
          "execute(address[],bytes[])",
          "setWaitTime(uint256)",
          "increaseTime(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timelock",
            "src": "contracts/external/council/features/Timelock.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "waitTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:12"
            },
            {
              "label": "callTimestamps",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:15"
            },
            {
              "label": "timeIncreases",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Authorizable.sol:Authorizable": {
        "src": "contracts/external/council/libraries/Authorizable.sol:4",
        "version": {
          "withMetadata": "71fa3ee295473ce46afb517633c3399cbccc4ebc0ef47e77c8330b7c62158399",
          "withoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e",
          "linkedWithoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "isAuthorized(address)",
          "authorize(address)",
          "deauthorize(address)",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authorizable",
            "src": "contracts/external/council/libraries/Authorizable.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock": {
        "src": "contracts/external/council/libraries/ReentrancyBlock.sol:4",
        "version": {
          "withMetadata": "76834a27b14c9e594d99b1d823fd3de34e524bf1804eb2f07b675529798eadc1",
          "withoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694",
          "linkedWithoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_entered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/ArcadeGSCCoreVoting.sol:ArcadeGSCCoreVoting": {
        "src": "contracts/ArcadeGSCCoreVoting.sol:14",
        "version": {
          "withMetadata": "b3b23b52ca17c7b31f6c53e9493c28c643f9dc5fc0ce30beefa8a31d2d53adcb",
          "withoutMetadata": "e2c3c5cb2a1edafda3fa8e0575e1dfbd2c45623af25664bb0e922e0adb1d6b07",
          "linkedWithoutMetadata": "e2c3c5cb2a1edafda3fa8e0575e1dfbd2c45623af25664bb0e922e0adb1d6b07"
        },
        "inherit": [
          "contracts/external/council/CoreVoting.sol:CoreVoting",
          "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting",
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256,address,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeGSCCoreVoting",
            "src": "contracts/ArcadeGSCCoreVoting.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "baseQuorum",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:11"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:19"
            },
            {
              "label": "extraVoteTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:24"
            },
            {
              "label": "minProposalPower",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:27"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:30"
            },
            {
              "label": "_quorums",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:33"
            },
            {
              "label": "approvedVaults",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:55"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)133_storage)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:58"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)139_storage))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint128)3_storage": {
              "label": "uint128[3]",
              "numberOfBytes": "64"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_enum(Ballot)116": {
              "label": "enum CoreVoting.Ballot",
              "members": [
                "YES",
                "NO",
                "MAYBE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
              "label": "mapping(address => mapping(bytes4 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)139_storage))": {
              "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_uint256)": {
              "label": "mapping(bytes4 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)133_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Vote)139_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Vote)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)133_storage": {
              "label": "struct CoreVoting.Proposal",
              "members": [
                {
                  "label": "proposalHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "created",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unlock",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "expiration",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "quorum",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_array(t_uint128)3_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastCall",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Vote)139_storage": {
              "label": "struct CoreVoting.Vote",
              "members": [
                {
                  "label": "votingPower",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "castBallot",
                  "type": "t_enum(Ballot)116",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/CoreVoting.sol:CoreVoting": {
        "src": "contracts/external/council/CoreVoting.sol:9",
        "version": {
          "withMetadata": "121082e426c033eb5e7e9f3f5c376149479b780f9aed94c10e453a1697f56d88",
          "withoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d",
          "linkedWithoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d"
        },
        "inherit": [
          "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting",
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "quorums(address,bytes4)",
          "(address,uint256,uint256,address,address[])",
          "proposal(address[],bytes[],address[],bytes[],uint256,uint8)",
          "vote(address[],bytes[],uint256,uint8)",
          "execute(uint256,address[],bytes[])",
          "getProposalVotingPower(uint256)",
          "setCustomQuorum(address,bytes4,uint256)",
          "changeVaultStatus(address,bool)",
          "setDefaultQuorum(uint256)",
          "setMinProposalPower(uint256)",
          "setLockDuration(uint256)",
          "changeExtraVotingTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CoreVoting",
            "src": "contracts/external/council/CoreVoting.sol:107"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lockDuration",
            "src": "contracts/external/council/CoreVoting.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "extraVoteTime",
            "src": "contracts/external/council/CoreVoting.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "baseQuorum",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:11"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:19"
            },
            {
              "label": "extraVoteTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:24"
            },
            {
              "label": "minProposalPower",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:27"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:30"
            },
            {
              "label": "_quorums",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:33"
            },
            {
              "label": "approvedVaults",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:55"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)133_storage)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:58"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)139_storage))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint128)3_storage": {
              "label": "uint128[3]",
              "numberOfBytes": "64"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_enum(Ballot)116": {
              "label": "enum CoreVoting.Ballot",
              "members": [
                "YES",
                "NO",
                "MAYBE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
              "label": "mapping(address => mapping(bytes4 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)139_storage))": {
              "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_uint256)": {
              "label": "mapping(bytes4 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)133_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Vote)139_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Vote)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)133_storage": {
              "label": "struct CoreVoting.Proposal",
              "members": [
                {
                  "label": "proposalHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "created",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unlock",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "expiration",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "quorum",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_array(t_uint128)3_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastCall",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Vote)139_storage": {
              "label": "struct CoreVoting.Vote",
              "members": [
                {
                  "label": "votingPower",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "castBallot",
                  "type": "t_enum(Ballot)116",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting": {
        "src": "contracts/external/council/interfaces/ICoreVoting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approvedVaults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault": {
        "src": "contracts/external/council/interfaces/IVotingVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Authorizable.sol:Authorizable": {
        "src": "contracts/external/council/libraries/Authorizable.sol:4",
        "version": {
          "withMetadata": "71fa3ee295473ce46afb517633c3399cbccc4ebc0ef47e77c8330b7c62158399",
          "withoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e",
          "linkedWithoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "isAuthorized(address)",
          "authorize(address)",
          "deauthorize(address)",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authorizable",
            "src": "contracts/external/council/libraries/Authorizable.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock": {
        "src": "contracts/external/council/libraries/ReentrancyBlock.sol:4",
        "version": {
          "withMetadata": "76834a27b14c9e594d99b1d823fd3de34e524bf1804eb2f07b675529798eadc1",
          "withoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694",
          "linkedWithoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_entered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "contracts/external/council/CoreVoting.sol:CoreVoting": {
        "src": "contracts/external/council/CoreVoting.sol:9",
        "version": {
          "withMetadata": "121082e426c033eb5e7e9f3f5c376149479b780f9aed94c10e453a1697f56d88",
          "withoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d",
          "linkedWithoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d"
        },
        "inherit": [
          "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting",
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "quorums(address,bytes4)",
          "(address,uint256,uint256,address,address[])",
          "proposal(address[],bytes[],address[],bytes[],uint256,uint8)",
          "vote(address[],bytes[],uint256,uint8)",
          "execute(uint256,address[],bytes[])",
          "getProposalVotingPower(uint256)",
          "setCustomQuorum(address,bytes4,uint256)",
          "changeVaultStatus(address,bool)",
          "setDefaultQuorum(uint256)",
          "setMinProposalPower(uint256)",
          "setLockDuration(uint256)",
          "changeExtraVotingTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CoreVoting",
            "src": "contracts/external/council/CoreVoting.sol:107"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lockDuration",
            "src": "contracts/external/council/CoreVoting.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "extraVoteTime",
            "src": "contracts/external/council/CoreVoting.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "baseQuorum",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:11"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:19"
            },
            {
              "label": "extraVoteTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:24"
            },
            {
              "label": "minProposalPower",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:27"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:30"
            },
            {
              "label": "_quorums",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:33"
            },
            {
              "label": "approvedVaults",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:55"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)103_storage)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:58"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)109_storage))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint128)3_storage": {
              "label": "uint128[3]",
              "numberOfBytes": "64"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_enum(Ballot)86": {
              "label": "enum CoreVoting.Ballot",
              "members": [
                "YES",
                "NO",
                "MAYBE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
              "label": "mapping(address => mapping(bytes4 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)109_storage))": {
              "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_uint256)": {
              "label": "mapping(bytes4 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)103_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Vote)109_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Vote)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)103_storage": {
              "label": "struct CoreVoting.Proposal",
              "members": [
                {
                  "label": "proposalHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "created",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unlock",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "expiration",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "quorum",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_array(t_uint128)3_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastCall",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Vote)109_storage": {
              "label": "struct CoreVoting.Vote",
              "members": [
                {
                  "label": "votingPower",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "castBallot",
                  "type": "t_enum(Ballot)86",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting": {
        "src": "contracts/external/council/interfaces/ICoreVoting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approvedVaults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault": {
        "src": "contracts/external/council/interfaces/IVotingVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Authorizable.sol:Authorizable": {
        "src": "contracts/external/council/libraries/Authorizable.sol:4",
        "version": {
          "withMetadata": "71fa3ee295473ce46afb517633c3399cbccc4ebc0ef47e77c8330b7c62158399",
          "withoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e",
          "linkedWithoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "isAuthorized(address)",
          "authorize(address)",
          "deauthorize(address)",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authorizable",
            "src": "contracts/external/council/libraries/Authorizable.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock": {
        "src": "contracts/external/council/libraries/ReentrancyBlock.sol:4",
        "version": {
          "withMetadata": "76834a27b14c9e594d99b1d823fd3de34e524bf1804eb2f07b675529798eadc1",
          "withoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694",
          "linkedWithoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_entered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "5be9cb785c85344cc5b95e7f8114ade2280ebcadc454d2ea23d3d3ba85f34190",
          "withoutMetadata": "a22f3ff611564dcc469387e81ce8a18792a0d86a1b5138a9b8bea93e9029f1d9",
          "linkedWithoutMetadata": "a22f3ff611564dcc469387e81ce8a18792a0d86a1b5138a9b8bea93e9029f1d9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)943_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)943_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)943_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:11",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:26",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeToken.sol:IArcadeToken": {
        "src": "contracts/interfaces/IArcadeToken.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "setMinter(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeToken.sol:ArcadeToken": {
        "src": "contracts/token/ArcadeToken.sol:74",
        "version": {
          "withMetadata": "c7303a4004384f4550885dff26fd6a33b9e6749dcc8f34b148f200e69a84b799",
          "withoutMetadata": "60bfc57cc5228d7a611b8a2739e3905cad4f3b314761fbdee16122cdcf100a01",
          "linkedWithoutMetadata": "60bfc57cc5228d7a611b8a2739e3905cad4f3b314761fbdee16122cdcf100a01"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "contracts/interfaces/IArcadeToken.sol:IArcadeToken",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setMinter(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeToken",
            "src": "contracts/token/ArcadeToken.sol:113"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)943_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:24"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ArcadeToken",
              "src": "contracts/token/ArcadeToken.sol:94"
            },
            {
              "label": "mintingAllowedAfter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ArcadeToken",
              "src": "contracts/token/ArcadeToken.sol:97"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)943_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)943_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:ERC721Permit": {
        "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:28",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:49"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC721Permit",
              "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/FeeController.sol:FeeController": {
        "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:22",
        "version": {
          "withMetadata": "67e1da3d27cf204c67f68c6fb0daa82a78e8c58aa5b9c85d3ce288862a141334",
          "withoutMetadata": "760cb49b892f01a344b0d7b0a2d6c8f7eeb6022029806c3f0ef292903688dc03",
          "linkedWithoutMetadata": "760cb49b892f01a344b0d7b0a2d6c8f7eeb6022029806c3f0ef292903688dc03"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@arcadexyz/v2-contracts/contracts/interfaces/IFeeController.sol:IFeeController"
        ],
        "libraries": [],
        "methods": [
          "setOriginationFee(uint256)",
          "setRolloverFee(uint256)",
          "getOriginationFee()",
          "getRolloverFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "originationFee",
            "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rolloverFee",
            "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "originationFee",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FeeController",
              "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:31"
            },
            {
              "label": "rolloverFee",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FeeController",
              "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:PromissoryNote": {
        "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:47",
        "version": {
          "withMetadata": "b56f41d7a2199125db7d8089cdc5bfa322b21b2373f859d150693e6fb0bc7592",
          "withoutMetadata": "17cd4f8f82dbdf287ed8f448254ec13f1d04979aec5360163f60e617e06b666e",
          "linkedWithoutMetadata": "17cd4f8f82dbdf287ed8f448254ec13f1d04979aec5360163f60e617e06b666e"
        },
        "inherit": [
          "@arcadexyz/v2-contracts/contracts/interfaces/IPromissoryNote.sol:IPromissoryNote",
          "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:ERC721Permit",
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol:ERC721Pausable",
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(string,string)",
          "initialize(address)",
          "mint(address,uint256)",
          "burn(uint256)",
          "setPaused(bool)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PromissoryNote",
            "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:15"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:24"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "12",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC721Permit",
              "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:38"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "PromissoryNote",
              "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:66"
            },
            {
              "label": "initialized",
              "offset": 20,
              "slot": "14",
              "type": "t_bool",
              "contract": "PromissoryNote",
              "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:67"
            },
            {
              "label": "_tokenIdTracker",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(Counter)6118_storage",
              "contract": "PromissoryNote",
              "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)7313_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)7012_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)7012_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/IFeeController.sol:IFeeController": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/IFeeController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOriginationFee(uint256)",
          "setRolloverFee(uint256)",
          "getOriginationFee()",
          "getRolloverFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/ILoanCore.sol:ILoanCore": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/ILoanCore.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "startLoan(address,address,(uint32,uint32,uint24,uint160,uint256,address,uint256,address))",
          "repay(uint256)",
          "repayPart(uint256,uint256,uint256,uint256,uint256)",
          "claim(uint256,uint256)",
          "rollover(uint256,address,address,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),uint256,uint256,uint256,uint256)",
          "consumeNonce(address,uint160)",
          "cancelNonce(uint160)",
          "getLoan(uint256)",
          "isNonceUsed(address,uint160)",
          "borrowerNote()",
          "lenderNote()",
          "feeController()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/IPromissoryNote.sol:IPromissoryNote": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/IPromissoryNote.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "setPaused(bool)",
          "initialize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/libraries/LoanLibrary.sol:LoanLibrary": {
        "src": "@arcadexyz/v2-contracts/contracts/libraries/LoanLibrary.sol:11",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)7313_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)7012_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)7012_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:19",
        "version": {
          "withMetadata": "634a1ae3590b5c70c864a2d4d43818aa5966a3544713741ce7f40c3d97a392e3",
          "withoutMetadata": "6164c443f1b075cf48111d3a4d0991851bf874cd6d24bc5a4a4468e6a0cb409e",
          "linkedWithoutMetadata": "6164c443f1b075cf48111d3a4d0991851bf874cd6d24bc5a4a4468e6a0cb409e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "5be9cb785c85344cc5b95e7f8114ade2280ebcadc454d2ea23d3d3ba85f34190",
          "withoutMetadata": "a22f3ff611564dcc469387e81ce8a18792a0d86a1b5138a9b8bea93e9029f1d9",
          "linkedWithoutMetadata": "a22f3ff611564dcc469387e81ce8a18792a0d86a1b5138a9b8bea93e9029f1d9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "a0ed05abd716aba9ddade9df855d14440dece318fd6f82410921931f465009bc",
          "withoutMetadata": "fd998993b64f72b698f33581e8c3b551a937aa6b52f4e3dd0891b22e5776f827",
          "linkedWithoutMetadata": "fd998993b64f72b698f33581e8c3b551a937aa6b52f4e3dd0891b22e5776f827"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:15"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol:ERC721Pausable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol:15",
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:11",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:14",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:26",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ARCDVestingVault.sol:ARCDVestingVault": {
        "src": "contracts/ARCDVestingVault.sol:48",
        "version": {
          "withMetadata": "756b023bcdbc242b955b7289a17480ccea89040410301620eef22f11070ded0d",
          "withoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226",
          "linkedWithoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226"
        },
        "inherit": [
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage",
          "contracts/external/council/libraries/Storage.sol:Storage",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,uint256,address,address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)",
          "claim(uint256)",
          "delegate(address)",
          "claimable(address)",
          "getGrant(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ARCDVestingVault",
            "src": "contracts/ARCDVestingVault.sol:66"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ArcadeGSCCoreVoting.sol:ArcadeGSCCoreVoting": {
        "src": "contracts/ArcadeGSCCoreVoting.sol:14",
        "version": {
          "withMetadata": "b3b23b52ca17c7b31f6c53e9493c28c643f9dc5fc0ce30beefa8a31d2d53adcb",
          "withoutMetadata": "e2c3c5cb2a1edafda3fa8e0575e1dfbd2c45623af25664bb0e922e0adb1d6b07",
          "linkedWithoutMetadata": "e2c3c5cb2a1edafda3fa8e0575e1dfbd2c45623af25664bb0e922e0adb1d6b07"
        },
        "inherit": [
          "contracts/external/council/CoreVoting.sol:CoreVoting",
          "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting",
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256,address,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeGSCCoreVoting",
            "src": "contracts/ArcadeGSCCoreVoting.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "baseQuorum",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:11"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:19"
            },
            {
              "label": "extraVoteTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:24"
            },
            {
              "label": "minProposalPower",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:27"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:30"
            },
            {
              "label": "_quorums",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:33"
            },
            {
              "label": "approvedVaults",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:55"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)11792_storage)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:58"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint128)3_storage": {
              "label": "uint128[3]",
              "numberOfBytes": "64"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_enum(Ballot)11775": {
              "label": "enum CoreVoting.Ballot",
              "members": [
                "YES",
                "NO",
                "MAYBE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
              "label": "mapping(address => mapping(bytes4 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))": {
              "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_uint256)": {
              "label": "mapping(bytes4 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)11792_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Vote)11798_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Vote)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)11792_storage": {
              "label": "struct CoreVoting.Proposal",
              "members": [
                {
                  "label": "proposalHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "created",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unlock",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "expiration",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "quorum",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_array(t_uint128)3_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastCall",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Vote)11798_storage": {
              "label": "struct CoreVoting.Vote",
              "members": [
                {
                  "label": "votingPower",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "castBallot",
                  "type": "t_enum(Ballot)11775",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ArcadeGSCVault.sol:ArcadeGSCVault": {
        "src": "contracts/ArcadeGSCVault.sol:25",
        "version": {
          "withMetadata": "26c7521c435bb61577623d3e8b6175488fe9bcf359fb123ffe00fdb798bb5c15",
          "withoutMetadata": "37505142e050b6c7a8cfc4e730049c827d9e160f02bffa2e50c04b8a76c41860",
          "linkedWithoutMetadata": "37505142e050b6c7a8cfc4e730049c827d9e160f02bffa2e50c04b8a76c41860"
        },
        "inherit": [
          "contracts/external/council/vaults/GSCVault.sol:GSCVault",
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeGSCVault",
            "src": "contracts/ArcadeGSCVault.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "members",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(Member)14110_storage)",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:17"
            },
            {
              "label": "coreVoting",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ICoreVoting)12802",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:19"
            },
            {
              "label": "votingPowerBound",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:21"
            },
            {
              "label": "idleDuration",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ICoreVoting)12802": {
              "label": "contract ICoreVoting",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Member)14110_storage)": {
              "label": "mapping(address => struct GSCVault.Member)",
              "numberOfBytes": "32"
            },
            "t_struct(Member)14110_storage": {
              "label": "struct GSCVault.Member",
              "members": [
                {
                  "label": "vaults",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "joined",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ArcadeTreasury.sol:ArcadeTreasury": {
        "src": "contracts/ArcadeTreasury.sol:44",
        "version": {
          "withMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db",
          "withoutMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db",
          "linkedWithoutMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/IArcadeTreasury.sol:IArcadeTreasury"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "gscSpend(address,uint256,address)",
          "smallSpend(address,uint256,address)",
          "mediumSpend(address,uint256,address)",
          "largeSpend(address,uint256,address)",
          "gscApprove(address,address,uint256)",
          "approveSmallSpend(address,address,uint256)",
          "approveMediumSpend(address,address,uint256)",
          "approveLargeSpend(address,address,uint256)",
          "setThreshold(address,(uint256,uint256,uint256))",
          "setGSCAllowance(address,uint256)",
          "batchCalls(address[],bytes[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeTreasury",
            "src": "contracts/ArcadeTreasury.sol:87"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            },
            {
              "label": "lastAllowanceSet",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint48)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:59"
            },
            {
              "label": "spendThresholds",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(SpendThreshold)15194_storage)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:62"
            },
            {
              "label": "gscAllowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:65"
            },
            {
              "label": "blockExpenditure",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(SpendThreshold)15194_storage)": {
              "label": "mapping(address => struct IArcadeTreasury.SpendThreshold)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint48)": {
              "label": "mapping(address => uint48)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(SpendThreshold)15194_storage": {
              "label": "struct IArcadeTreasury.SpendThreshold",
              "members": [
                {
                  "label": "small",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "medium",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "large",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/BaseVotingVault.sol:BaseVotingVault": {
        "src": "contracts/BaseVotingVault.sol:24",
        "inherit": [
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [
          "setTimelock(address)",
          "setManager(address)",
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVotingVault",
            "src": "contracts/BaseVotingVault.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/BaseVotingVault.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "staleBlockLag",
            "src": "contracts/BaseVotingVault.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ImmutableVestingVault.sol:ImmutableVestingVault": {
        "src": "contracts/ImmutableVestingVault.sol:18",
        "version": {
          "withMetadata": "ced9ed75a5b74132054020f7bb9e7a024c8713a17d9332b41b5f379ea2022970",
          "withoutMetadata": "876cfb15c296f1aafee805750b33154bd4fce24ea131c9005aa0dfd45503ef28",
          "linkedWithoutMetadata": "876cfb15c296f1aafee805750b33154bd4fce24ea131c9005aa0dfd45503ef28"
        },
        "inherit": [
          "contracts/ARCDVestingVault.sol:ARCDVestingVault",
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address,address)",
          "revokeGrant(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ImmutableVestingVault",
            "src": "contracts/ImmutableVestingVault.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/NFTBoostVault.sol:NFTBoostVault": {
        "src": "contracts/NFTBoostVault.sol:55",
        "version": {
          "withMetadata": "d571c8e6074ab0086b420c420b787fb936322bc8bc2ce3cfe60b43d7133facf5",
          "withoutMetadata": "5cf28d768152b50b094084940371176c88a66ddd3a0a78b9a36a50ef6cf8feca",
          "linkedWithoutMetadata": "5cf28d768152b50b094084940371176c88a66ddd3a0a78b9a36a50ef6cf8feca"
        },
        "inherit": [
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/INFTBoostVault.sol:INFTBoostVault"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage",
          "contracts/libraries/NFTBoostVaultStorage.sol:NFTBoostVaultStorage"
        ],
        "methods": [
          "(address,uint256,address,address)",
          "addNftAndDelegate(uint128,uint128,address,address)",
          "airdropReceive(address,uint128,address)",
          "delegate(address)",
          "withdraw(uint128)",
          "addTokens(uint128)",
          "withdrawNft()",
          "updateNft(uint128,address)",
          "updateVotingPower(address[])",
          "setMultiplier(address,uint128,uint128)",
          "unlock()",
          "setAirdropContract(address)",
          "getIsLocked()",
          "getMultiplier(address,uint128)",
          "getRegistration(address)",
          "getAirdropContract()",
          "onERC1155Received(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTBoostVault",
            "src": "contracts/NFTBoostVault.sol:82"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/CoreVoting.sol:CoreVoting": {
        "src": "contracts/external/council/CoreVoting.sol:9",
        "version": {
          "withMetadata": "121082e426c033eb5e7e9f3f5c376149479b780f9aed94c10e453a1697f56d88",
          "withoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d",
          "linkedWithoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d"
        },
        "inherit": [
          "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting",
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "quorums(address,bytes4)",
          "(address,uint256,uint256,address,address[])",
          "proposal(address[],bytes[],address[],bytes[],uint256,uint8)",
          "vote(address[],bytes[],uint256,uint8)",
          "execute(uint256,address[],bytes[])",
          "getProposalVotingPower(uint256)",
          "setCustomQuorum(address,bytes4,uint256)",
          "changeVaultStatus(address,bool)",
          "setDefaultQuorum(uint256)",
          "setMinProposalPower(uint256)",
          "setLockDuration(uint256)",
          "changeExtraVotingTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CoreVoting",
            "src": "contracts/external/council/CoreVoting.sol:107"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lockDuration",
            "src": "contracts/external/council/CoreVoting.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "extraVoteTime",
            "src": "contracts/external/council/CoreVoting.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "baseQuorum",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:11"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:19"
            },
            {
              "label": "extraVoteTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:24"
            },
            {
              "label": "minProposalPower",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:27"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:30"
            },
            {
              "label": "_quorums",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:33"
            },
            {
              "label": "approvedVaults",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:55"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)11792_storage)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:58"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint128)3_storage": {
              "label": "uint128[3]",
              "numberOfBytes": "64"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_enum(Ballot)11775": {
              "label": "enum CoreVoting.Ballot",
              "members": [
                "YES",
                "NO",
                "MAYBE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
              "label": "mapping(address => mapping(bytes4 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))": {
              "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_uint256)": {
              "label": "mapping(bytes4 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)11792_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Vote)11798_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Vote)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)11792_storage": {
              "label": "struct CoreVoting.Proposal",
              "members": [
                {
                  "label": "proposalHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "created",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unlock",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "expiration",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "quorum",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_array(t_uint128)3_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastCall",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Vote)11798_storage": {
              "label": "struct CoreVoting.Vote",
              "members": [
                {
                  "label": "votingPower",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "castBallot",
                  "type": "t_enum(Ballot)11775",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/features/Timelock.sol:Timelock": {
        "src": "contracts/external/council/features/Timelock.sol:10",
        "version": {
          "withMetadata": "140485bbea58d8b4352f0339933d48e48b1690401a21640a84c2e9cc4af3fb0d",
          "withoutMetadata": "eac9e7c5ea408ad88fbbab3afcd6d3a03fa2646e3fb262d5ba7fd3876859d49c",
          "linkedWithoutMetadata": "eac9e7c5ea408ad88fbbab3afcd6d3a03fa2646e3fb262d5ba7fd3876859d49c"
        },
        "inherit": [
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "registerCall(bytes32)",
          "stopCall(bytes32)",
          "execute(address[],bytes[])",
          "setWaitTime(uint256)",
          "increaseTime(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timelock",
            "src": "contracts/external/council/features/Timelock.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "waitTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:12"
            },
            {
              "label": "callTimestamps",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:15"
            },
            {
              "label": "timeIncreases",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting": {
        "src": "contracts/external/council/interfaces/ICoreVoting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approvedVaults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/external/council/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "symbol()",
          "balanceOf(address)",
          "decimals()",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/ILockingVault.sol:ILockingVault": {
        "src": "contracts/external/council/interfaces/ILockingVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256)",
          "token()",
          "changeDelegation(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault": {
        "src": "contracts/external/council/interfaces/IVotingVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Authorizable.sol:Authorizable": {
        "src": "contracts/external/council/libraries/Authorizable.sol:4",
        "version": {
          "withMetadata": "71fa3ee295473ce46afb517633c3399cbccc4ebc0ef47e77c8330b7c62158399",
          "withoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e",
          "linkedWithoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "isAuthorized(address)",
          "authorize(address)",
          "deauthorize(address)",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authorizable",
            "src": "contracts/external/council/libraries/Authorizable.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/History.sol:History": {
        "src": "contracts/external/council/libraries/History.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/MerkleRewards.sol:AbstractMerkleRewards": {
        "src": "contracts/external/council/libraries/MerkleRewards.sol:8",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "claimAndDelegate(uint256,address,uint256,bytes32[],address)",
          "claim(uint256,uint256,bytes32[],address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AbstractMerkleRewards",
            "src": "contracts/external/council/libraries/MerkleRewards.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/external/council/libraries/MerkleRewards.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:11"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:15"
            },
            {
              "label": "lockingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILockingVault)12909",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ILockingVault)12909": {
              "label": "contract ILockingVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/MerkleRewards.sol:MerkleRewards": {
        "src": "contracts/external/council/libraries/MerkleRewards.sol:100",
        "version": {
          "withMetadata": "f6690be2ecc0ff9a5401d5ca06744b1fd0fdc128cc7c826292aeb63eeb957e0f",
          "withoutMetadata": "c6c22a7e413b707a615a912e680c7bc0f128ea30634812f905eb6fb601c360a6",
          "linkedWithoutMetadata": "c6c22a7e413b707a615a912e680c7bc0f128ea30634812f905eb6fb601c360a6"
        },
        "inherit": [
          "contracts/external/council/libraries/MerkleRewards.sol:AbstractMerkleRewards"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MerkleRewards",
            "src": "contracts/external/council/libraries/MerkleRewards.sol:105"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:11"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:15"
            },
            {
              "label": "lockingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILockingVault)12909",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ILockingVault)12909": {
              "label": "contract ILockingVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock": {
        "src": "contracts/external/council/libraries/ReentrancyBlock.sol:4",
        "version": {
          "withMetadata": "76834a27b14c9e594d99b1d823fd3de34e524bf1804eb2f07b675529798eadc1",
          "withoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694",
          "linkedWithoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_entered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Storage.sol:Storage": {
        "src": "contracts/external/council/libraries/Storage.sol:6",
        "version": {
          "withMetadata": "4f433fc3039cc66c6476004f5575fcfd25f0eaa738496015482a35b0b3c02e91",
          "withoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5",
          "linkedWithoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPtr(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/vaults/GSCVault.sol:GSCVault": {
        "src": "contracts/external/council/vaults/GSCVault.sol:15",
        "version": {
          "withMetadata": "dced911acdc58e72849713773171069e99bfec0cff22d85b55d3ec41eb638bb9",
          "withoutMetadata": "3e91c0ca208cf37c6fd321e39d64a93f78e7c1dac7362305fb1f4b825561ab9e",
          "linkedWithoutMetadata": "3e91c0ca208cf37c6fd321e39d64a93f78e7c1dac7362305fb1f4b825561ab9e"
        },
        "inherit": [
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "proveMembership(address[],bytes[])",
          "kick(address,bytes[])",
          "queryVotePower(address,uint256,bytes)",
          "getUserVaults(address)",
          "setCoreVoting(address)",
          "setVotePowerBound(uint256)",
          "setIdleDuration(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSCVault",
            "src": "contracts/external/council/vaults/GSCVault.sol:41"
          },
          {
            "kind": "state-variable-assignment",
            "name": "idleDuration",
            "src": "contracts/external/council/vaults/GSCVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "members",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(Member)14110_storage)",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:17"
            },
            {
              "label": "coreVoting",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ICoreVoting)12802",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:19"
            },
            {
              "label": "votingPowerBound",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:21"
            },
            {
              "label": "idleDuration",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ICoreVoting)12802": {
              "label": "contract ICoreVoting",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Member)14110_storage)": {
              "label": "mapping(address => struct GSCVault.Member)",
              "numberOfBytes": "32"
            },
            "t_struct(Member)14110_storage": {
              "label": "struct GSCVault.Member",
              "members": [
                {
                  "label": "vaults",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "joined",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/vaults/LockingVault.sol:AbstractLockingVault": {
        "src": "contracts/external/council/vaults/LockingVault.sol:10",
        "inherit": [
          "contracts/external/council/interfaces/ILockingVault.sol:ILockingVault",
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [
          "deposits(address)",
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "deposit(address,uint256,address)",
          "withdraw(uint256)",
          "changeDelegation(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AbstractLockingVault",
            "src": "contracts/external/council/vaults/LockingVault.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/external/council/vaults/LockingVault.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "staleBlockLag",
            "src": "contracts/external/council/vaults/LockingVault.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/vaults/LockingVault.sol:LockingVault": {
        "src": "contracts/external/council/vaults/LockingVault.sol:201",
        "version": {
          "withMetadata": "d041defa3275fc4fd5e1b3f2d2a668f086e1517e8df6e6838b08ad36b63bf80c",
          "withoutMetadata": "3df9155771e5a7a13722c8e304f3402c362deff371f4057d540b271ab56c2c20",
          "linkedWithoutMetadata": "3df9155771e5a7a13722c8e304f3402c362deff371f4057d540b271ab56c2c20"
        },
        "inherit": [
          "contracts/external/council/vaults/LockingVault.sol:AbstractLockingVault",
          "contracts/external/council/interfaces/ILockingVault.sol:ILockingVault",
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockingVault",
            "src": "contracts/external/council/vaults/LockingVault.sol:205"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault": {
        "src": "contracts/interfaces/IARCDVestingVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGrant(address)",
          "claimable(address)",
          "claim(uint256)",
          "delegate(address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeCoreVoting.sol:IArcadeCoreVoting": {
        "src": "contracts/interfaces/IArcadeCoreVoting.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quorums(address,bytes4)",
          "getProposalVotingPower(uint256)",
          "approvedVaults(address)",
          "proposal(address[],bytes[],address[],bytes[],uint256,uint8)",
          "vote(address[],bytes[],uint256,uint8)",
          "execute(uint256,address[],bytes[])",
          "setCustomQuorum(address,bytes4,uint256)",
          "changeVaultStatus(address,bool)",
          "setDefaultQuorum(uint256)",
          "setMinProposalPower(uint256)",
          "setLockDuration(uint256)",
          "changeExtraVotingTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeToken.sol:IArcadeToken": {
        "src": "contracts/interfaces/IArcadeToken.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "setMinter(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeTreasury.sol:IArcadeTreasury": {
        "src": "contracts/interfaces/IArcadeTreasury.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gscSpend(address,uint256,address)",
          "smallSpend(address,uint256,address)",
          "mediumSpend(address,uint256,address)",
          "largeSpend(address,uint256,address)",
          "gscApprove(address,address,uint256)",
          "approveSmallSpend(address,address,uint256)",
          "approveMediumSpend(address,address,uint256)",
          "approveLargeSpend(address,address,uint256)",
          "setThreshold(address,(uint256,uint256,uint256))",
          "setGSCAllowance(address,uint256)",
          "batchCalls(address[],bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBadgeDescriptor.sol:IBadgeDescriptor": {
        "src": "contracts/interfaces/IBadgeDescriptor.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(uint256)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault": {
        "src": "contracts/interfaces/IBaseVotingVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "setTimelock(address)",
          "setManager(address)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/INFTBoostVault.sol:INFTBoostVault": {
        "src": "contracts/interfaces/INFTBoostVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getIsLocked()",
          "getRegistration(address)",
          "getMultiplier(address,uint128)",
          "getAirdropContract()",
          "addNftAndDelegate(uint128,uint128,address,address)",
          "airdropReceive(address,uint128,address)",
          "delegate(address)",
          "withdraw(uint128)",
          "addTokens(uint128)",
          "withdrawNft()",
          "updateNft(uint128,address)",
          "updateVotingPower(address[])",
          "setMultiplier(address,uint128,uint128)",
          "unlock()",
          "setAirdropContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IReputationBadge.sol:IReputationBadge": {
        "src": "contracts/interfaces/IReputationBadge.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256,uint256,bytes32[])",
          "uri(uint256)",
          "publishRoots(struct IReputationBadge.ClaimData[])",
          "withdrawFees(address)",
          "setDescriptor(address)",
          "amountClaimed(address,uint256)",
          "claimRoots(uint256)",
          "claimExpirations(uint256)",
          "mintPrices(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage": {
        "src": "contracts/libraries/ARCDVestingVaultStorage.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/ArcadeMerkleRewards.sol:ArcadeMerkleRewards": {
        "src": "contracts/libraries/ArcadeMerkleRewards.sol:24",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "claimAndDelegate(address,uint128,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeMerkleRewards",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:57"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "expiration",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:37"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:40"
            },
            {
              "label": "votingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(INFTBoostVault)15468",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INFTBoostVault)15468": {
              "label": "contract INFTBoostVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock": {
        "src": "contracts/libraries/HashedStorageReentrancyBlock.sol:15",
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/NFTBoostVaultStorage.sol:NFTBoostVaultStorage": {
        "src": "contracts/libraries/NFTBoostVaultStorage.sol:12",
        "version": {
          "withMetadata": "c50e7b87880f5d1281db5f860add9b3f84ec65d69eaf288da741b7d009351ffb",
          "withoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447",
          "linkedWithoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/nft/BadgeDescriptor.sol:BadgeDescriptor": {
        "src": "contracts/nft/BadgeDescriptor.sol:17",
        "version": {
          "withMetadata": "8e51966b76c1c726eef1070e9391f23668f272f01831bc528c53027c422dde16",
          "withoutMetadata": "2bba92810a5491d602b35a7de36b1aabbede1f22cd9e49149f6bf582d0f5965e",
          "linkedWithoutMetadata": "2bba92810a5491d602b35a7de36b1aabbede1f22cd9e49149f6bf582d0f5965e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/IBadgeDescriptor.sol:IBadgeDescriptor"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string)",
          "tokenURI(uint256)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BadgeDescriptor",
            "src": "contracts/nft/BadgeDescriptor.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "baseURI",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "BadgeDescriptor",
              "src": "contracts/nft/BadgeDescriptor.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/nft/ReputationBadge.sol:ReputationBadge": {
        "src": "contracts/nft/ReputationBadge.sol:39",
        "version": {
          "withMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3",
          "withoutMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3",
          "linkedWithoutMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3"
        },
        "inherit": [
          "contracts/interfaces/IReputationBadge.sol:IReputationBadge",
          "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "(address,address)",
          "mint(address,uint256,uint256,uint256,bytes32[])",
          "uri(uint256)",
          "publishRoots(struct IReputationBadge.ClaimData[])",
          "withdrawFees(address)",
          "setDescriptor(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReputationBadge",
            "src": "contracts/nft/ReputationBadge.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "descriptor",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IBadgeDescriptor)15306",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:41"
            },
            {
              "label": "amountClaimed",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:49"
            },
            {
              "label": "claimRoots",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:52"
            },
            {
              "label": "claimExpirations",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint48)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:55"
            },
            {
              "label": "mintPrices",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBadgeDescriptor)15306": {
              "label": "contract IBadgeDescriptor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint48)": {
              "label": "mapping(uint256 => uint48)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/test/MockERC1155.sol:MockERC1155": {
        "src": "contracts/test/MockERC1155.sol:8",
        "version": {
          "withMetadata": "8e69b28700ddf36064557aafe261b4eb3c22b78f47fb71fe268a7465b39995d3",
          "withoutMetadata": "c970a035aaba64d9e64e060ae89f8ffd24f217da91310c6bb039fa83a2a4f013",
          "linkedWithoutMetadata": "c970a035aaba64d9e64e060ae89f8ffd24f217da91310c6bb039fa83a2a4f013"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "mint(address,uint256,uint256)",
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC1155",
            "src": "contracts/test/MockERC1155.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/test/MockERC20Reentrancy.sol:MockERC20Reentrancy": {
        "src": "contracts/test/MockERC20Reentrancy.sol:8",
        "version": {
          "withMetadata": "a790b5f7736b08fb29113162b343253e53917d501b8411d9965c477d9f7517d7",
          "withoutMetadata": "7f4ceba5e45bfd49186721a279899ff165ea95be7392c3fe68bedd450cfb92a4",
          "linkedWithoutMetadata": "7f4ceba5e45bfd49186721a279899ff165ea95be7392c3fe68bedd450cfb92a4"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setVesting(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20Reentrancy",
            "src": "contracts/test/MockERC20Reentrancy.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockERC20Reentrancy",
              "src": "contracts/test/MockERC20Reentrancy.sol:9"
            },
            {
              "label": "vesting",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IARCDVestingVault)15019",
              "contract": "MockERC20Reentrancy",
              "src": "contracts/test/MockERC20Reentrancy.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IARCDVestingVault)15019": {
              "label": "contract IARCDVestingVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/test/MockERC721.sol:MockERC721": {
        "src": "contracts/test/MockERC721.sol:8",
        "version": {
          "withMetadata": "b8e7fa8f6e7a7beca539296e802d6c41cc5d9ef126023bed85c09ade2771dd95",
          "withoutMetadata": "d9596e69da4f092a05d0eaf1887476b09f013e740e172fa1062b449bd818099b",
          "linkedWithoutMetadata": "d9596e69da4f092a05d0eaf1887476b09f013e740e172fa1062b449bd818099b"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(string,string)",
          "mint(address)",
          "mintId(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC721",
            "src": "contracts/test/MockERC721.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:15"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:24"
            },
            {
              "label": "_tokenIdTracker",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Counter)6118_storage",
              "contract": "MockERC721",
              "src": "contracts/test/MockERC721.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeAirdrop.sol:ArcadeAirdrop": {
        "src": "contracts/token/ArcadeAirdrop.sol:21",
        "version": {
          "withMetadata": "1bf118193f7ac5713a7887682f1791bdc9755628ce28d2893e89a552581979bd",
          "withoutMetadata": "1634adf6686a78c7711a242d2b5aa32fe7eb1fcc01f08129be4feb1d3959e1fa",
          "linkedWithoutMetadata": "1634adf6686a78c7711a242d2b5aa32fe7eb1fcc01f08129be4feb1d3959e1fa"
        },
        "inherit": [
          "contracts/external/council/libraries/Authorizable.sol:Authorizable",
          "contracts/libraries/ArcadeMerkleRewards.sol:ArcadeMerkleRewards"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,bytes32,address,uint256,address)",
          "reclaim(address)",
          "setMerkleRoot(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeAirdrop",
            "src": "contracts/token/ArcadeAirdrop.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:37"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:40"
            },
            {
              "label": "votingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(INFTBoostVault)15468",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:43"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INFTBoostVault)15468": {
              "label": "contract INFTBoostVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeToken.sol:ArcadeToken": {
        "src": "contracts/token/ArcadeToken.sol:74",
        "version": {
          "withMetadata": "c7303a4004384f4550885dff26fd6a33b9e6749dcc8f34b148f200e69a84b799",
          "withoutMetadata": "60bfc57cc5228d7a611b8a2739e3905cad4f3b314761fbdee16122cdcf100a01",
          "linkedWithoutMetadata": "60bfc57cc5228d7a611b8a2739e3905cad4f3b314761fbdee16122cdcf100a01"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "contracts/interfaces/IArcadeToken.sol:IArcadeToken",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setMinter(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeToken",
            "src": "contracts/token/ArcadeToken.sol:113"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:24"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ArcadeToken",
              "src": "contracts/token/ArcadeToken.sol:94"
            },
            {
              "label": "mintingAllowedAfter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ArcadeToken",
              "src": "contracts/token/ArcadeToken.sol:97"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeTokenDistributor.sol:ArcadeTokenDistributor": {
        "src": "contracts/token/ArcadeTokenDistributor.sol:23",
        "version": {
          "withMetadata": "a2925c04deee64b6209feab1c36ae797707426cdca8df83bca6fa28efe081175",
          "withoutMetadata": "c7fbd8c6cd6b85ae368f44e4b04a77ade098d73bfa317d8d8b00b9be689e3c99",
          "linkedWithoutMetadata": "c7fbd8c6cd6b85ae368f44e4b04a77ade098d73bfa317d8d8b00b9be689e3c99"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "toTreasury(address)",
          "toDevPartner(address)",
          "toCommunityRewards(address)",
          "toCommunityAirdrop(address)",
          "toTeamVesting(address)",
          "toPartnerVesting(address)",
          "setToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "arcadeToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IArcadeToken)15185",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:29"
            },
            {
              "label": "treasurySent",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:34"
            },
            {
              "label": "devPartnerSent",
              "offset": 21,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:39"
            },
            {
              "label": "communityRewardsSent",
              "offset": 22,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:44"
            },
            {
              "label": "communityAirdropSent",
              "offset": 23,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:49"
            },
            {
              "label": "vestingTeamSent",
              "offset": 24,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:54"
            },
            {
              "label": "vestingPartnerSent",
              "offset": 25,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IArcadeToken)15185": {
              "label": "contract IArcadeToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeToken.sol:IArcadeToken": {
        "src": "contracts/interfaces/IArcadeToken.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "setMinter(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeTokenDistributor.sol:ArcadeTokenDistributor": {
        "src": "contracts/token/ArcadeTokenDistributor.sol:23",
        "version": {
          "withMetadata": "a2925c04deee64b6209feab1c36ae797707426cdca8df83bca6fa28efe081175",
          "withoutMetadata": "c7fbd8c6cd6b85ae368f44e4b04a77ade098d73bfa317d8d8b00b9be689e3c99",
          "linkedWithoutMetadata": "c7fbd8c6cd6b85ae368f44e4b04a77ade098d73bfa317d8d8b00b9be689e3c99"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "toTreasury(address)",
          "toDevPartner(address)",
          "toCommunityRewards(address)",
          "toCommunityAirdrop(address)",
          "toTeamVesting(address)",
          "toPartnerVesting(address)",
          "setToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "arcadeToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IArcadeToken)786",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:29"
            },
            {
              "label": "treasurySent",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:34"
            },
            {
              "label": "devPartnerSent",
              "offset": 21,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:39"
            },
            {
              "label": "communityRewardsSent",
              "offset": 22,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:44"
            },
            {
              "label": "communityAirdropSent",
              "offset": 23,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:49"
            },
            {
              "label": "vestingTeamSent",
              "offset": 24,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:54"
            },
            {
              "label": "vestingPartnerSent",
              "offset": 25,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IArcadeToken)786": {
              "label": "contract IArcadeToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    },
    {
      "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:ERC721Permit": {
        "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:28",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:49"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC721Permit",
              "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/FeeController.sol:FeeController": {
        "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:22",
        "version": {
          "withMetadata": "67e1da3d27cf204c67f68c6fb0daa82a78e8c58aa5b9c85d3ce288862a141334",
          "withoutMetadata": "760cb49b892f01a344b0d7b0a2d6c8f7eeb6022029806c3f0ef292903688dc03",
          "linkedWithoutMetadata": "760cb49b892f01a344b0d7b0a2d6c8f7eeb6022029806c3f0ef292903688dc03"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@arcadexyz/v2-contracts/contracts/interfaces/IFeeController.sol:IFeeController"
        ],
        "libraries": [],
        "methods": [
          "setOriginationFee(uint256)",
          "setRolloverFee(uint256)",
          "getOriginationFee()",
          "getRolloverFee()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "originationFee",
            "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rolloverFee",
            "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "originationFee",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "FeeController",
              "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:31"
            },
            {
              "label": "rolloverFee",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "FeeController",
              "src": "@arcadexyz/v2-contracts/contracts/FeeController.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:PromissoryNote": {
        "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:47",
        "version": {
          "withMetadata": "b56f41d7a2199125db7d8089cdc5bfa322b21b2373f859d150693e6fb0bc7592",
          "withoutMetadata": "17cd4f8f82dbdf287ed8f448254ec13f1d04979aec5360163f60e617e06b666e",
          "linkedWithoutMetadata": "17cd4f8f82dbdf287ed8f448254ec13f1d04979aec5360163f60e617e06b666e"
        },
        "inherit": [
          "@arcadexyz/v2-contracts/contracts/interfaces/IPromissoryNote.sol:IPromissoryNote",
          "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:ERC721Permit",
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol:ERC721Pausable",
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(string,string)",
          "initialize(address)",
          "mint(address,uint256)",
          "burn(uint256)",
          "setPaused(bool)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PromissoryNote",
            "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:15"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:24"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "12",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC721Permit",
              "src": "@arcadexyz/v2-contracts/contracts/ERC721Permit.sol:38"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "PromissoryNote",
              "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:66"
            },
            {
              "label": "initialized",
              "offset": 20,
              "slot": "14",
              "type": "t_bool",
              "contract": "PromissoryNote",
              "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:67"
            },
            {
              "label": "_tokenIdTracker",
              "offset": 0,
              "slot": "15",
              "type": "t_struct(Counter)6118_storage",
              "contract": "PromissoryNote",
              "src": "@arcadexyz/v2-contracts/contracts/PromissoryNote.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)7313_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)7012_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)7012_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/IERC721Permit.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/IFeeController.sol:IFeeController": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/IFeeController.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setOriginationFee(uint256)",
          "setRolloverFee(uint256)",
          "getOriginationFee()",
          "getRolloverFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/ILoanCore.sol:ILoanCore": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/ILoanCore.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "startLoan(address,address,(uint32,uint32,uint24,uint160,uint256,address,uint256,address))",
          "repay(uint256)",
          "repayPart(uint256,uint256,uint256,uint256,uint256)",
          "claim(uint256,uint256)",
          "rollover(uint256,address,address,(uint32,uint32,uint24,uint160,uint256,address,uint256,address),uint256,uint256,uint256,uint256)",
          "consumeNonce(address,uint160)",
          "cancelNonce(uint160)",
          "getLoan(uint256)",
          "isNonceUsed(address,uint160)",
          "borrowerNote()",
          "lenderNote()",
          "feeController()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/interfaces/IPromissoryNote.sol:IPromissoryNote": {
        "src": "@arcadexyz/v2-contracts/contracts/interfaces/IPromissoryNote.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "setPaused(bool)",
          "initialize(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@arcadexyz/v2-contracts/contracts/libraries/LoanLibrary.sol:LoanLibrary": {
        "src": "@arcadexyz/v2-contracts/contracts/libraries/LoanLibrary.sol:11",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)7313_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)7012_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)7012_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:19",
        "version": {
          "withMetadata": "634a1ae3590b5c70c864a2d4d43818aa5966a3544713741ce7f40c3d97a392e3",
          "withoutMetadata": "6164c443f1b075cf48111d3a4d0991851bf874cd6d24bc5a4a4468e6a0cb409e",
          "linkedWithoutMetadata": "6164c443f1b075cf48111d3a4d0991851bf874cd6d24bc5a4a4468e6a0cb409e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "5be9cb785c85344cc5b95e7f8114ade2280ebcadc454d2ea23d3d3ba85f34190",
          "withoutMetadata": "a22f3ff611564dcc469387e81ce8a18792a0d86a1b5138a9b8bea93e9029f1d9",
          "linkedWithoutMetadata": "a22f3ff611564dcc469387e81ce8a18792a0d86a1b5138a9b8bea93e9029f1d9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "a0ed05abd716aba9ddade9df855d14440dece318fd6f82410921931f465009bc",
          "withoutMetadata": "fd998993b64f72b698f33581e8c3b551a937aa6b52f4e3dd0891b22e5776f827",
          "linkedWithoutMetadata": "fd998993b64f72b698f33581e8c3b551a937aa6b52f4e3dd0891b22e5776f827"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:15"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol:ERC721Pausable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol:15",
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "6",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:11",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:14",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:26",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ARCDVestingVault.sol:ARCDVestingVault": {
        "src": "contracts/ARCDVestingVault.sol:48",
        "version": {
          "withMetadata": "756b023bcdbc242b955b7289a17480ccea89040410301620eef22f11070ded0d",
          "withoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226",
          "linkedWithoutMetadata": "a5d4a7039ffe9ae7078c111dfc35a73d7c5e2ca58af0eb2b8336ae35e89cf226"
        },
        "inherit": [
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage",
          "contracts/external/council/libraries/Storage.sol:Storage",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,uint256,address,address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)",
          "claim(uint256)",
          "delegate(address)",
          "claimable(address)",
          "getGrant(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ARCDVestingVault",
            "src": "contracts/ARCDVestingVault.sol:66"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ArcadeGSCCoreVoting.sol:ArcadeGSCCoreVoting": {
        "src": "contracts/ArcadeGSCCoreVoting.sol:14",
        "version": {
          "withMetadata": "b3b23b52ca17c7b31f6c53e9493c28c643f9dc5fc0ce30beefa8a31d2d53adcb",
          "withoutMetadata": "e2c3c5cb2a1edafda3fa8e0575e1dfbd2c45623af25664bb0e922e0adb1d6b07",
          "linkedWithoutMetadata": "e2c3c5cb2a1edafda3fa8e0575e1dfbd2c45623af25664bb0e922e0adb1d6b07"
        },
        "inherit": [
          "contracts/external/council/CoreVoting.sol:CoreVoting",
          "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting",
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256,address,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeGSCCoreVoting",
            "src": "contracts/ArcadeGSCCoreVoting.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "baseQuorum",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:11"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:19"
            },
            {
              "label": "extraVoteTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:24"
            },
            {
              "label": "minProposalPower",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:27"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:30"
            },
            {
              "label": "_quorums",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:33"
            },
            {
              "label": "approvedVaults",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:55"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)11792_storage)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:58"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint128)3_storage": {
              "label": "uint128[3]",
              "numberOfBytes": "64"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_enum(Ballot)11775": {
              "label": "enum CoreVoting.Ballot",
              "members": [
                "YES",
                "NO",
                "MAYBE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
              "label": "mapping(address => mapping(bytes4 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))": {
              "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_uint256)": {
              "label": "mapping(bytes4 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)11792_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Vote)11798_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Vote)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)11792_storage": {
              "label": "struct CoreVoting.Proposal",
              "members": [
                {
                  "label": "proposalHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "created",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unlock",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "expiration",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "quorum",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_array(t_uint128)3_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastCall",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Vote)11798_storage": {
              "label": "struct CoreVoting.Vote",
              "members": [
                {
                  "label": "votingPower",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "castBallot",
                  "type": "t_enum(Ballot)11775",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ArcadeGSCVault.sol:ArcadeGSCVault": {
        "src": "contracts/ArcadeGSCVault.sol:25",
        "version": {
          "withMetadata": "26c7521c435bb61577623d3e8b6175488fe9bcf359fb123ffe00fdb798bb5c15",
          "withoutMetadata": "37505142e050b6c7a8cfc4e730049c827d9e160f02bffa2e50c04b8a76c41860",
          "linkedWithoutMetadata": "37505142e050b6c7a8cfc4e730049c827d9e160f02bffa2e50c04b8a76c41860"
        },
        "inherit": [
          "contracts/external/council/vaults/GSCVault.sol:GSCVault",
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeGSCVault",
            "src": "contracts/ArcadeGSCVault.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "members",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(Member)14110_storage)",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:17"
            },
            {
              "label": "coreVoting",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ICoreVoting)12802",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:19"
            },
            {
              "label": "votingPowerBound",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:21"
            },
            {
              "label": "idleDuration",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ICoreVoting)12802": {
              "label": "contract ICoreVoting",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Member)14110_storage)": {
              "label": "mapping(address => struct GSCVault.Member)",
              "numberOfBytes": "32"
            },
            "t_struct(Member)14110_storage": {
              "label": "struct GSCVault.Member",
              "members": [
                {
                  "label": "vaults",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "joined",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ArcadeTreasury.sol:ArcadeTreasury": {
        "src": "contracts/ArcadeTreasury.sol:44",
        "version": {
          "withMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db",
          "withoutMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db",
          "linkedWithoutMetadata": "4ebd8d91ae5b6dbac250c1a4424dc54897562c8faed2b69d66087bf94b61b8db"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/IArcadeTreasury.sol:IArcadeTreasury"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "gscSpend(address,uint256,address)",
          "smallSpend(address,uint256,address)",
          "mediumSpend(address,uint256,address)",
          "largeSpend(address,uint256,address)",
          "gscApprove(address,address,uint256)",
          "approveSmallSpend(address,address,uint256)",
          "approveMediumSpend(address,address,uint256)",
          "approveLargeSpend(address,address,uint256)",
          "setThreshold(address,(uint256,uint256,uint256))",
          "setGSCAllowance(address,uint256)",
          "batchCalls(address[],bytes[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeTreasury",
            "src": "contracts/ArcadeTreasury.sol:87"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            },
            {
              "label": "lastAllowanceSet",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint48)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:59"
            },
            {
              "label": "spendThresholds",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(SpendThreshold)15194_storage)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:62"
            },
            {
              "label": "gscAllowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:65"
            },
            {
              "label": "blockExpenditure",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ArcadeTreasury",
              "src": "contracts/ArcadeTreasury.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(SpendThreshold)15194_storage)": {
              "label": "mapping(address => struct IArcadeTreasury.SpendThreshold)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint48)": {
              "label": "mapping(address => uint48)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(SpendThreshold)15194_storage": {
              "label": "struct IArcadeTreasury.SpendThreshold",
              "members": [
                {
                  "label": "small",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "medium",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "large",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/BaseVotingVault.sol:BaseVotingVault": {
        "src": "contracts/BaseVotingVault.sol:24",
        "inherit": [
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [
          "setTimelock(address)",
          "setManager(address)",
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaseVotingVault",
            "src": "contracts/BaseVotingVault.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/BaseVotingVault.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "staleBlockLag",
            "src": "contracts/BaseVotingVault.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/ImmutableVestingVault.sol:ImmutableVestingVault": {
        "src": "contracts/ImmutableVestingVault.sol:18",
        "version": {
          "withMetadata": "ced9ed75a5b74132054020f7bb9e7a024c8713a17d9332b41b5f379ea2022970",
          "withoutMetadata": "876cfb15c296f1aafee805750b33154bd4fce24ea131c9005aa0dfd45503ef28",
          "linkedWithoutMetadata": "876cfb15c296f1aafee805750b33154bd4fce24ea131c9005aa0dfd45503ef28"
        },
        "inherit": [
          "contracts/ARCDVestingVault.sol:ARCDVestingVault",
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address,address)",
          "revokeGrant(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ImmutableVestingVault",
            "src": "contracts/ImmutableVestingVault.sol:28"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/NFTBoostVault.sol:NFTBoostVault": {
        "src": "contracts/NFTBoostVault.sol:55",
        "version": {
          "withMetadata": "d571c8e6074ab0086b420c420b787fb936322bc8bc2ce3cfe60b43d7133facf5",
          "withoutMetadata": "5cf28d768152b50b094084940371176c88a66ddd3a0a78b9a36a50ef6cf8feca",
          "linkedWithoutMetadata": "5cf28d768152b50b094084940371176c88a66ddd3a0a78b9a36a50ef6cf8feca"
        },
        "inherit": [
          "contracts/BaseVotingVault.sol:BaseVotingVault",
          "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault",
          "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock",
          "contracts/interfaces/INFTBoostVault.sol:INFTBoostVault"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage",
          "contracts/libraries/NFTBoostVaultStorage.sol:NFTBoostVaultStorage"
        ],
        "methods": [
          "(address,uint256,address,address)",
          "addNftAndDelegate(uint128,uint128,address,address)",
          "airdropReceive(address,uint128,address)",
          "delegate(address)",
          "withdraw(uint128)",
          "addTokens(uint128)",
          "withdrawNft()",
          "updateNft(uint128,address)",
          "updateVotingPower(address[])",
          "setMultiplier(address,uint128,uint128)",
          "unlock()",
          "setAirdropContract(address)",
          "getIsLocked()",
          "getMultiplier(address,uint128)",
          "getRegistration(address)",
          "getAirdropContract()",
          "onERC1155Received(address,address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTBoostVault",
            "src": "contracts/NFTBoostVault.sol:82"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/CoreVoting.sol:CoreVoting": {
        "src": "contracts/external/council/CoreVoting.sol:9",
        "version": {
          "withMetadata": "121082e426c033eb5e7e9f3f5c376149479b780f9aed94c10e453a1697f56d88",
          "withoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d",
          "linkedWithoutMetadata": "dc684243100cd83636774ccf4ec6d35faf4f3734b25d918bd74eda33382d222d"
        },
        "inherit": [
          "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting",
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "quorums(address,bytes4)",
          "(address,uint256,uint256,address,address[])",
          "proposal(address[],bytes[],address[],bytes[],uint256,uint8)",
          "vote(address[],bytes[],uint256,uint8)",
          "execute(uint256,address[],bytes[])",
          "getProposalVotingPower(uint256)",
          "setCustomQuorum(address,bytes4,uint256)",
          "changeVaultStatus(address,bool)",
          "setDefaultQuorum(uint256)",
          "setMinProposalPower(uint256)",
          "setLockDuration(uint256)",
          "changeExtraVotingTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CoreVoting",
            "src": "contracts/external/council/CoreVoting.sol:107"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lockDuration",
            "src": "contracts/external/council/CoreVoting.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "extraVoteTime",
            "src": "contracts/external/council/CoreVoting.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "baseQuorum",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:11"
            },
            {
              "label": "lockDuration",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:19"
            },
            {
              "label": "extraVoteTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:24"
            },
            {
              "label": "minProposalPower",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:27"
            },
            {
              "label": "proposalCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:30"
            },
            {
              "label": "_quorums",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:33"
            },
            {
              "label": "approvedVaults",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:55"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_struct(Proposal)11792_storage)",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:58"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))",
              "contract": "CoreVoting",
              "src": "contracts/external/council/CoreVoting.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint128)3_storage": {
              "label": "uint128[3]",
              "numberOfBytes": "64"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_enum(Ballot)11775": {
              "label": "enum CoreVoting.Ballot",
              "members": [
                "YES",
                "NO",
                "MAYBE"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes4,t_uint256))": {
              "label": "mapping(address => mapping(bytes4 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vote)11798_storage))": {
              "label": "mapping(address => mapping(uint256 => struct CoreVoting.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_uint256)": {
              "label": "mapping(bytes4 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)11792_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Vote)11798_storage)": {
              "label": "mapping(uint256 => struct CoreVoting.Vote)",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)11792_storage": {
              "label": "struct CoreVoting.Proposal",
              "members": [
                {
                  "label": "proposalHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "created",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unlock",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "expiration",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "quorum",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_array(t_uint128)3_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastCall",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Vote)11798_storage": {
              "label": "struct CoreVoting.Vote",
              "members": [
                {
                  "label": "votingPower",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "castBallot",
                  "type": "t_enum(Ballot)11775",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/features/Timelock.sol:Timelock": {
        "src": "contracts/external/council/features/Timelock.sol:10",
        "version": {
          "withMetadata": "140485bbea58d8b4352f0339933d48e48b1690401a21640a84c2e9cc4af3fb0d",
          "withoutMetadata": "eac9e7c5ea408ad88fbbab3afcd6d3a03fa2646e3fb262d5ba7fd3876859d49c",
          "linkedWithoutMetadata": "eac9e7c5ea408ad88fbbab3afcd6d3a03fa2646e3fb262d5ba7fd3876859d49c"
        },
        "inherit": [
          "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address,address)",
          "registerCall(bytes32)",
          "stopCall(bytes32)",
          "execute(address[],bytes[])",
          "setWaitTime(uint256)",
          "increaseTime(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Timelock",
            "src": "contracts/external/council/features/Timelock.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "_entered",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            },
            {
              "label": "waitTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:12"
            },
            {
              "label": "callTimestamps",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:15"
            },
            {
              "label": "timeIncreases",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "Timelock",
              "src": "contracts/external/council/features/Timelock.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/ICoreVoting.sol:ICoreVoting": {
        "src": "contracts/external/council/interfaces/ICoreVoting.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approvedVaults(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/external/council/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "symbol()",
          "balanceOf(address)",
          "decimals()",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/ILockingVault.sol:ILockingVault": {
        "src": "contracts/external/council/interfaces/ILockingVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address)",
          "withdraw(uint256)",
          "token()",
          "changeDelegation(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault": {
        "src": "contracts/external/council/interfaces/IVotingVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Authorizable.sol:Authorizable": {
        "src": "contracts/external/council/libraries/Authorizable.sol:4",
        "version": {
          "withMetadata": "71fa3ee295473ce46afb517633c3399cbccc4ebc0ef47e77c8330b7c62158399",
          "withoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e",
          "linkedWithoutMetadata": "2df77dc505b9d9f8b70dc44c40fd4ec8f31b9887dcc9ca49a27df2207fcd330e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "isAuthorized(address)",
          "authorize(address)",
          "deauthorize(address)",
          "setOwner(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Authorizable",
            "src": "contracts/external/council/libraries/Authorizable.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/History.sol:History": {
        "src": "contracts/external/council/libraries/History.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/MerkleRewards.sol:AbstractMerkleRewards": {
        "src": "contracts/external/council/libraries/MerkleRewards.sol:8",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "claimAndDelegate(uint256,address,uint256,bytes32[],address)",
          "claim(uint256,uint256,bytes32[],address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AbstractMerkleRewards",
            "src": "contracts/external/council/libraries/MerkleRewards.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/external/council/libraries/MerkleRewards.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:11"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:15"
            },
            {
              "label": "lockingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILockingVault)12909",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ILockingVault)12909": {
              "label": "contract ILockingVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/MerkleRewards.sol:MerkleRewards": {
        "src": "contracts/external/council/libraries/MerkleRewards.sol:100",
        "version": {
          "withMetadata": "f6690be2ecc0ff9a5401d5ca06744b1fd0fdc128cc7c826292aeb63eeb957e0f",
          "withoutMetadata": "c6c22a7e413b707a615a912e680c7bc0f128ea30634812f905eb6fb601c360a6",
          "linkedWithoutMetadata": "c6c22a7e413b707a615a912e680c7bc0f128ea30634812f905eb6fb601c360a6"
        },
        "inherit": [
          "contracts/external/council/libraries/MerkleRewards.sol:AbstractMerkleRewards"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MerkleRewards",
            "src": "contracts/external/council/libraries/MerkleRewards.sol:105"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:11"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:15"
            },
            {
              "label": "lockingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ILockingVault)12909",
              "contract": "AbstractMerkleRewards",
              "src": "contracts/external/council/libraries/MerkleRewards.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ILockingVault)12909": {
              "label": "contract ILockingVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/ReentrancyBlock.sol:ReentrancyBlock": {
        "src": "contracts/external/council/libraries/ReentrancyBlock.sol:4",
        "version": {
          "withMetadata": "76834a27b14c9e594d99b1d823fd3de34e524bf1804eb2f07b675529798eadc1",
          "withoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694",
          "linkedWithoutMetadata": "e6bd347e5e7ac309caee2435054172f228025e55b944dbc152d2eb7d96f41694"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_entered",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "ReentrancyBlock",
              "src": "contracts/external/council/libraries/ReentrancyBlock.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/libraries/Storage.sol:Storage": {
        "src": "contracts/external/council/libraries/Storage.sol:6",
        "version": {
          "withMetadata": "4f433fc3039cc66c6476004f5575fcfd25f0eaa738496015482a35b0b3c02e91",
          "withoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5",
          "linkedWithoutMetadata": "cf1d8d7f418c616b3e59328a7b2ab76246e0457c5ed26836e8d87a5767edc9b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPtr(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/vaults/GSCVault.sol:GSCVault": {
        "src": "contracts/external/council/vaults/GSCVault.sol:15",
        "version": {
          "withMetadata": "dced911acdc58e72849713773171069e99bfec0cff22d85b55d3ec41eb638bb9",
          "withoutMetadata": "3e91c0ca208cf37c6fd321e39d64a93f78e7c1dac7362305fb1f4b825561ab9e",
          "linkedWithoutMetadata": "3e91c0ca208cf37c6fd321e39d64a93f78e7c1dac7362305fb1f4b825561ab9e"
        },
        "inherit": [
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault",
          "contracts/external/council/libraries/Authorizable.sol:Authorizable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,address)",
          "proveMembership(address[],bytes[])",
          "kick(address,bytes[])",
          "queryVotePower(address,uint256,bytes)",
          "getUserVaults(address)",
          "setCoreVoting(address)",
          "setVotePowerBound(uint256)",
          "setIdleDuration(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSCVault",
            "src": "contracts/external/council/vaults/GSCVault.sol:41"
          },
          {
            "kind": "state-variable-assignment",
            "name": "idleDuration",
            "src": "contracts/external/council/vaults/GSCVault.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            },
            {
              "label": "members",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(Member)14110_storage)",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:17"
            },
            {
              "label": "coreVoting",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(ICoreVoting)12802",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:19"
            },
            {
              "label": "votingPowerBound",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:21"
            },
            {
              "label": "idleDuration",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GSCVault",
              "src": "contracts/external/council/vaults/GSCVault.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ICoreVoting)12802": {
              "label": "contract ICoreVoting",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Member)14110_storage)": {
              "label": "mapping(address => struct GSCVault.Member)",
              "numberOfBytes": "32"
            },
            "t_struct(Member)14110_storage": {
              "label": "struct GSCVault.Member",
              "members": [
                {
                  "label": "vaults",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "joined",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/vaults/LockingVault.sol:AbstractLockingVault": {
        "src": "contracts/external/council/vaults/LockingVault.sol:10",
        "inherit": [
          "contracts/external/council/interfaces/ILockingVault.sol:ILockingVault",
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault"
        ],
        "libraries": [
          "contracts/external/council/libraries/History.sol:History",
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [
          "deposits(address)",
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "deposit(address,uint256,address)",
          "withdraw(uint256)",
          "changeDelegation(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AbstractLockingVault",
            "src": "contracts/external/council/vaults/LockingVault.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/external/council/vaults/LockingVault.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "staleBlockLag",
            "src": "contracts/external/council/vaults/LockingVault.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/external/council/vaults/LockingVault.sol:LockingVault": {
        "src": "contracts/external/council/vaults/LockingVault.sol:201",
        "version": {
          "withMetadata": "d041defa3275fc4fd5e1b3f2d2a668f086e1517e8df6e6838b08ad36b63bf80c",
          "withoutMetadata": "3df9155771e5a7a13722c8e304f3402c362deff371f4057d540b271ab56c2c20",
          "linkedWithoutMetadata": "3df9155771e5a7a13722c8e304f3402c362deff371f4057d540b271ab56c2c20"
        },
        "inherit": [
          "contracts/external/council/vaults/LockingVault.sol:AbstractLockingVault",
          "contracts/external/council/interfaces/ILockingVault.sol:ILockingVault",
          "contracts/external/council/interfaces/IVotingVault.sol:IVotingVault"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LockingVault",
            "src": "contracts/external/council/vaults/LockingVault.sol:205"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IARCDVestingVault.sol:IARCDVestingVault": {
        "src": "contracts/interfaces/IARCDVestingVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getGrant(address)",
          "claimable(address)",
          "claim(uint256)",
          "delegate(address)",
          "addGrantAndDelegate(address,uint128,uint128,uint128,uint128,uint128,address)",
          "revokeGrant(address)",
          "deposit(uint256)",
          "withdraw(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeCoreVoting.sol:IArcadeCoreVoting": {
        "src": "contracts/interfaces/IArcadeCoreVoting.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quorums(address,bytes4)",
          "getProposalVotingPower(uint256)",
          "approvedVaults(address)",
          "proposal(address[],bytes[],address[],bytes[],uint256,uint8)",
          "vote(address[],bytes[],uint256,uint8)",
          "execute(uint256,address[],bytes[])",
          "setCustomQuorum(address,bytes4,uint256)",
          "changeVaultStatus(address,bool)",
          "setDefaultQuorum(uint256)",
          "setMinProposalPower(uint256)",
          "setLockDuration(uint256)",
          "changeExtraVotingTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeToken.sol:IArcadeToken": {
        "src": "contracts/interfaces/IArcadeToken.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "setMinter(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IArcadeTreasury.sol:IArcadeTreasury": {
        "src": "contracts/interfaces/IArcadeTreasury.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gscSpend(address,uint256,address)",
          "smallSpend(address,uint256,address)",
          "mediumSpend(address,uint256,address)",
          "largeSpend(address,uint256,address)",
          "gscApprove(address,address,uint256)",
          "approveSmallSpend(address,address,uint256)",
          "approveMediumSpend(address,address,uint256)",
          "approveLargeSpend(address,address,uint256)",
          "setThreshold(address,(uint256,uint256,uint256))",
          "setGSCAllowance(address,uint256)",
          "batchCalls(address[],bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBadgeDescriptor.sol:IBadgeDescriptor": {
        "src": "contracts/interfaces/IBadgeDescriptor.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(uint256)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IBaseVotingVault.sol:IBaseVotingVault": {
        "src": "contracts/interfaces/IBaseVotingVault.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queryVotePower(address,uint256,bytes)",
          "queryVotePowerView(address,uint256)",
          "setTimelock(address)",
          "setManager(address)",
          "timelock()",
          "manager()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/INFTBoostVault.sol:INFTBoostVault": {
        "src": "contracts/interfaces/INFTBoostVault.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getIsLocked()",
          "getRegistration(address)",
          "getMultiplier(address,uint128)",
          "getAirdropContract()",
          "addNftAndDelegate(uint128,uint128,address,address)",
          "airdropReceive(address,uint128,address)",
          "delegate(address)",
          "withdraw(uint128)",
          "addTokens(uint128)",
          "withdrawNft()",
          "updateNft(uint128,address)",
          "updateVotingPower(address[])",
          "setMultiplier(address,uint128,uint128)",
          "unlock()",
          "setAirdropContract(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/interfaces/IReputationBadge.sol:IReputationBadge": {
        "src": "contracts/interfaces/IReputationBadge.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256,uint256,uint256,bytes32[])",
          "uri(uint256)",
          "publishRoots(struct IReputationBadge.ClaimData[])",
          "withdrawFees(address)",
          "setDescriptor(address)",
          "amountClaimed(address,uint256)",
          "claimRoots(uint256)",
          "claimExpirations(uint256)",
          "mintPrices(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/ARCDVestingVaultStorage.sol:ARCDVestingVaultStorage": {
        "src": "contracts/libraries/ARCDVestingVaultStorage.sol:13",
        "version": {
          "withMetadata": "14a757c4269e96b282e868549d22f5c5d6103d8bfbc7bb76f642b5b7c192c7e3",
          "withoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f",
          "linkedWithoutMetadata": "50918aecfb797943d937d0779744d7d7415633fa0699c041a24f4a8412fe6a4f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/ArcadeMerkleRewards.sol:ArcadeMerkleRewards": {
        "src": "contracts/libraries/ArcadeMerkleRewards.sol:24",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "claimAndDelegate(address,uint128,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeMerkleRewards",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:57"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "expiration",
            "src": "contracts/libraries/ArcadeMerkleRewards.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:37"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:40"
            },
            {
              "label": "votingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(INFTBoostVault)15468",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INFTBoostVault)15468": {
              "label": "contract INFTBoostVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/HashedStorageReentrancyBlock.sol:HashedStorageReentrancyBlock": {
        "src": "contracts/libraries/HashedStorageReentrancyBlock.sol:15",
        "inherit": [],
        "libraries": [
          "contracts/external/council/libraries/Storage.sol:Storage"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/libraries/NFTBoostVaultStorage.sol:NFTBoostVaultStorage": {
        "src": "contracts/libraries/NFTBoostVaultStorage.sol:12",
        "version": {
          "withMetadata": "c50e7b87880f5d1281db5f860add9b3f84ec65d69eaf288da741b7d009351ffb",
          "withoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447",
          "linkedWithoutMetadata": "9777fdc2ee9931062eed4e437a8412c1dc641bd7669f17919e9ae1164b03c447"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.18"
      },
      "contracts/nft/BadgeDescriptor.sol:BadgeDescriptor": {
        "src": "contracts/nft/BadgeDescriptor.sol:17",
        "version": {
          "withMetadata": "8e51966b76c1c726eef1070e9391f23668f272f01831bc528c53027c422dde16",
          "withoutMetadata": "2bba92810a5491d602b35a7de36b1aabbede1f22cd9e49149f6bf582d0f5965e",
          "linkedWithoutMetadata": "2bba92810a5491d602b35a7de36b1aabbede1f22cd9e49149f6bf582d0f5965e"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/interfaces/IBadgeDescriptor.sol:IBadgeDescriptor"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string)",
          "tokenURI(uint256)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BadgeDescriptor",
            "src": "contracts/nft/BadgeDescriptor.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "baseURI",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "BadgeDescriptor",
              "src": "contracts/nft/BadgeDescriptor.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/nft/ReputationBadge.sol:ReputationBadge": {
        "src": "contracts/nft/ReputationBadge.sol:39",
        "version": {
          "withMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3",
          "withoutMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3",
          "linkedWithoutMetadata": "94738259f0f6afa50354f9e7dd111fca5b373e596651cf5fa16e279684edcdc3"
        },
        "inherit": [
          "contracts/interfaces/IReputationBadge.sol:IReputationBadge",
          "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:ERC1155Burnable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof"
        ],
        "methods": [
          "(address,address)",
          "mint(address,uint256,uint256,uint256,bytes32[])",
          "uri(uint256)",
          "publishRoots(struct IReputationBadge.ClaimData[])",
          "withdrawFees(address)",
          "setDescriptor(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReputationBadge",
            "src": "contracts/nft/ReputationBadge.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            },
            {
              "label": "descriptor",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IBadgeDescriptor)15306",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:41"
            },
            {
              "label": "amountClaimed",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:49"
            },
            {
              "label": "claimRoots",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:52"
            },
            {
              "label": "claimExpirations",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint48)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:55"
            },
            {
              "label": "mintPrices",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ReputationBadge",
              "src": "contracts/nft/ReputationBadge.sol:58"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBadgeDescriptor)15306": {
              "label": "contract IBadgeDescriptor",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1142_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint48)": {
              "label": "mapping(uint256 => uint48)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)1142_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48",
              "numberOfBytes": "6"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/test/MockERC1155.sol:MockERC1155": {
        "src": "contracts/test/MockERC1155.sol:8",
        "version": {
          "withMetadata": "8e69b28700ddf36064557aafe261b4eb3c22b78f47fb71fe268a7465b39995d3",
          "withoutMetadata": "c970a035aaba64d9e64e060ae89f8ffd24f217da91310c6bb039fa83a2a4f013",
          "linkedWithoutMetadata": "c970a035aaba64d9e64e060ae89f8ffd24f217da91310c6bb039fa83a2a4f013"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "mint(address,uint256,uint256)",
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC1155",
            "src": "contracts/test/MockERC1155.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/test/MockERC20Reentrancy.sol:MockERC20Reentrancy": {
        "src": "contracts/test/MockERC20Reentrancy.sol:8",
        "version": {
          "withMetadata": "a790b5f7736b08fb29113162b343253e53917d501b8411d9965c477d9f7517d7",
          "withoutMetadata": "7f4ceba5e45bfd49186721a279899ff165ea95be7392c3fe68bedd450cfb92a4",
          "linkedWithoutMetadata": "7f4ceba5e45bfd49186721a279899ff165ea95be7392c3fe68bedd450cfb92a4"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setVesting(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20Reentrancy",
            "src": "contracts/test/MockERC20Reentrancy.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "MockERC20Reentrancy",
              "src": "contracts/test/MockERC20Reentrancy.sol:9"
            },
            {
              "label": "vesting",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(IARCDVestingVault)15019",
              "contract": "MockERC20Reentrancy",
              "src": "contracts/test/MockERC20Reentrancy.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IARCDVestingVault)15019": {
              "label": "contract IARCDVestingVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/test/MockERC721.sol:MockERC721": {
        "src": "contracts/test/MockERC721.sol:8",
        "version": {
          "withMetadata": "b8e7fa8f6e7a7beca539296e802d6c41cc5d9ef126023bed85c09ade2771dd95",
          "withoutMetadata": "d9596e69da4f092a05d0eaf1887476b09f013e740e172fa1062b449bd818099b",
          "linkedWithoutMetadata": "d9596e69da4f092a05d0eaf1887476b09f013e740e172fa1062b449bd818099b"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(string,string)",
          "mint(address)",
          "mintId(uint256,address)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC721",
            "src": "contracts/test/MockERC721.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:15"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:24"
            },
            {
              "label": "_tokenIdTracker",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Counter)6118_storage",
              "contract": "MockERC721",
              "src": "contracts/test/MockERC721.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeAirdrop.sol:ArcadeAirdrop": {
        "src": "contracts/token/ArcadeAirdrop.sol:21",
        "version": {
          "withMetadata": "1bf118193f7ac5713a7887682f1791bdc9755628ce28d2893e89a552581979bd",
          "withoutMetadata": "1634adf6686a78c7711a242d2b5aa32fe7eb1fcc01f08129be4feb1d3959e1fa",
          "linkedWithoutMetadata": "1634adf6686a78c7711a242d2b5aa32fe7eb1fcc01f08129be4feb1d3959e1fa"
        },
        "inherit": [
          "contracts/external/council/libraries/Authorizable.sol:Authorizable",
          "contracts/libraries/ArcadeMerkleRewards.sol:ArcadeMerkleRewards"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,bytes32,address,uint256,address)",
          "reclaim(address)",
          "setMerkleRoot(bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeAirdrop",
            "src": "contracts/token/ArcadeAirdrop.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rewardsRoot",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes32",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:37"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:40"
            },
            {
              "label": "votingVault",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(INFTBoostVault)15468",
              "contract": "ArcadeMerkleRewards",
              "src": "contracts/libraries/ArcadeMerkleRewards.sol:43"
            },
            {
              "label": "owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:8"
            },
            {
              "label": "authorized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Authorizable",
              "src": "contracts/external/council/libraries/Authorizable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INFTBoostVault)15468": {
              "label": "contract INFTBoostVault",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeToken.sol:ArcadeToken": {
        "src": "contracts/token/ArcadeToken.sol:74",
        "version": {
          "withMetadata": "c7303a4004384f4550885dff26fd6a33b9e6749dcc8f34b148f200e69a84b799",
          "withoutMetadata": "60bfc57cc5228d7a611b8a2739e3905cad4f3b314761fbdee16122cdcf100a01",
          "linkedWithoutMetadata": "60bfc57cc5228d7a611b8a2739e3905cad4f3b314761fbdee16122cdcf100a01"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
          "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol:EIP712",
          "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit",
          "contracts/interfaces/IArcadeToken.sol:IArcadeToken",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setMinter(address)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArcadeToken",
            "src": "contracts/token/ArcadeToken.sol:113"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(Counter)6118_storage)",
              "contract": "ERC20Permit",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:24"
            },
            {
              "label": "minter",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "ArcadeToken",
              "src": "contracts/token/ArcadeToken.sol:94"
            },
            {
              "label": "mintingAllowedAfter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "ArcadeToken",
              "src": "contracts/token/ArcadeToken.sol:97"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)6118_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)6118_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      },
      "contracts/token/ArcadeTokenDistributor.sol:ArcadeTokenDistributor": {
        "src": "contracts/token/ArcadeTokenDistributor.sol:23",
        "version": {
          "withMetadata": "a2925c04deee64b6209feab1c36ae797707426cdca8df83bca6fa28efe081175",
          "withoutMetadata": "c7fbd8c6cd6b85ae368f44e4b04a77ade098d73bfa317d8d8b00b9be689e3c99",
          "linkedWithoutMetadata": "c7fbd8c6cd6b85ae368f44e4b04a77ade098d73bfa317d8d8b00b9be689e3c99"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "toTreasury(address)",
          "toDevPartner(address)",
          "toCommunityRewards(address)",
          "toCommunityAirdrop(address)",
          "toTeamVesting(address)",
          "toPartnerVesting(address)",
          "setToken(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            },
            {
              "label": "arcadeToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IArcadeToken)15185",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:29"
            },
            {
              "label": "treasurySent",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:34"
            },
            {
              "label": "devPartnerSent",
              "offset": 21,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:39"
            },
            {
              "label": "communityRewardsSent",
              "offset": 22,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:44"
            },
            {
              "label": "communityAirdropSent",
              "offset": 23,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:49"
            },
            {
              "label": "vestingTeamSent",
              "offset": 24,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:54"
            },
            {
              "label": "vestingPartnerSent",
              "offset": 25,
              "slot": "1",
              "type": "t_bool",
              "contract": "ArcadeTokenDistributor",
              "src": "contracts/token/ArcadeTokenDistributor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IArcadeToken)15185": {
              "label": "contract IArcadeToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.18"
      }
    }
  ]
}